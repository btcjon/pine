//@version=5

strategy('TTB DCA 5.6L', overlay=true, pyramiding=999, calc_on_every_tick=false, default_qty_type=strategy.cash, default_qty_value=1, initial_capital=100000, commission_value=0.00, slippage=0)


source_type = input.string('Close', 'Source', options=['Close', 'Open', 'High', 'Low', 'HL2', 'HLC3', 'OHLC4', 'Median Body', 'Weighted Close', 'Trend Biased', 'Trend Biased Extreme'])
direction = input.string(defval='Long', title='Trading Direction', options=['All', 'Long', 'Short'])

source_function(type) =>
    if type == 'Close'
        close
    else if type == 'Open'
        open
    else if type == 'High'
        high
    else if type == 'Low'
        low
    else if type == 'HL2'
        hl2
    else if type == 'HL3'
        hlc3
    else if type == 'OHLC4'
        ohlc4
    else if type == 'Median Body'
        (open + close) / 2
    else if type == 'Weighted Close'
        (high + low + 2 * close) / 4
    else if type == 'Trend Biased'
        close > open ? (high + close) / 2 : (low + close) / 2
    else if type == 'Trend Biased Extreme'
        close > open ? high : low

truncate(number, decimals) =>
    factor = math.pow(10, decimals)
    int(number * factor) / factor

var long = false
var short = true

if direction == 'All'
    long := true
    short := true
    short
else if direction == 'Long'
    long := true
    short := false
    short
else if direction == 'Short'
    long := false
    short := true
    short

// Strategy Inputs
ID = input(defval='6700960415957', title='ID')
groupTitleLongInputs = "Long Inputs"
price_deviation = input.float(0.05, title='Price deviation to open safety orders (%)', step=0.1, minval=0.0) / 100
take_profit = input.float(0.1, title='Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_order = input.float(3000, "Base Order Size")
safe_order = input.float(5000, "Safe Order Size")
safe_order_volume_scale = input.float(1.4, step=0.1, title='Safety order volume scale')
safe_order_step_scale = input.float(1.8, step=0.1, title='Safety order step scale')
max_safe_order = input(4, title='max no. of safe orders')
groupTitleShortInputs = "Short Inputs"
price_S_deviation = input.float(0.05, title='Price deviation to open short safety orders (%)', step=0.1, minval=0.0) / 100
take_S_profit = input.float(0.1, title='Short Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_S_order = input.float(3000, title='base sell order')
safe_S_order = input.float(5000, title='safe sell order')
safe_S_order_volume_scale = input.float(1.4, step=0.1, title='Safety sell order volume scale')
safe_S_order_step_scale = input.float(1.8, step=0.1, title='Safety sell order step scale')
max_S_safe_order = input(4, title='max no. of sell safe orders')


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// rmi trend


// ** ---> Inputs ------------- {
var bool rmi_positive               = false
var bool rmi_negative               = false
string rmi_RSI_group                = "RMI Settings"
string rmi_mom_group                = "Range Vales"
string rmi_visual                   = "Visuals" 
int rmi_Length                      = input(14,"RMI Length ",inline = "RMI",group = rmi_RSI_group)
int rmi_pmom                        = input(66," Positive above",inline = "rsi1",group = rmi_RSI_group )
int rmi_nmom                        = input(30,"Negative below",inline = "rsi1",group = rmi_RSI_group )
bool rmi_filleshow = true
color rmi_bull = color.new(color.rgb(0, 188, 212), 70) // 70% transparency
color rmi_bear = color.new(color.rgb(255, 82, 82), 70) // 70% transparency
float rmi_BarRange                  = high - low

rmi_up = ta.rma(math.max(ta.change(close), 0), rmi_Length)
rmi_down = ta.rma(-math.min(ta.change(close), 0), rmi_Length)
rmi_rsi = rmi_down == 0 ? 100 : rmi_up == 0 ? 0 : 100 - (100 / (1 + rmi_up / rmi_down))
rmi_mf = ta.mfi(hlc3, rmi_Length)
rmi_rsi_mfi = math.avg(rmi_rsi,rmi_mf)



//------------------- }

bool rmi_p_mom                          = rmi_rsi_mfi[1] < rmi_pmom and
      rmi_rsi_mfi > rmi_pmom and
      rmi_rsi_mfi > rmi_nmom and
       ta.change(ta.ema(close,5)) > 0

bool rmi_n_mom                          = rmi_rsi_mfi < rmi_nmom and
      ta.change(ta.ema(close,5)) < 0
// //  ---> Momentums ------------- {

if rmi_p_mom
    rmi_positive:= true
    rmi_negative:= false

if rmi_n_mom
    rmi_positive:= false
    rmi_negative:= true     



//
method rmi_Band(int len)=>
    math.min (ta.atr (len) * 0.3, close * (0.3/100)) [20] /2 * 8 


rmi_Band = rmi_Band(30) 


method rmi_rangeMA(float Range,Prd)=>
    weight = Range / math.sum(Range, Prd)
    sum = math.sum(close * weight, Prd)
    tw= math.sum(weight, Prd)
    sum / tw


// Calculate the RWMA
rmi_rwma = rmi_rangeMA(rmi_BarRange,20)

// Plotting the RWMA.
colour = rmi_positive ? rmi_bull : rmi_bear
rmi_RWMA = rmi_positive ? rmi_rwma - rmi_Band : rmi_negative ? rmi_rwma + rmi_Band : na
alpha = color.new(color.black, 100)

center = plot(rmi_filleshow ? rmi_RWMA : na, "RRTH", colour, editable = true)
plot(rmi_filleshow ? rmi_RWMA : na, "RRTH", color.new(colour, 70), 2, editable = true)
plot(rmi_filleshow ? rmi_RWMA : na, "RRTH", color.new(colour, 80), 3, editable = true)
plot(rmi_filleshow ? rmi_RWMA : na, "RRTH", color.new(colour, 90), 4, editable = true)

rmi_max = rmi_RWMA + rmi_Band
rmi_min = rmi_RWMA - rmi_Band

top = plot(rmi_filleshow ? rmi_max: na, "RRTH", alpha)
bottom = plot(rmi_filleshow ? rmi_min: na, "RRTH", alpha)
fill(top, center, top_value =  rmi_max, bottom_value = rmi_RWMA, bottom_color = color.new(colour, 75), top_color = alpha, editable = true)
fill(center, bottom, top_value =  rmi_RWMA, bottom_value = rmi_min, bottom_color = alpha, top_color = color.new(colour, 75), editable = true)
Barcol = rmi_positive ? color.green:color.red

if rmi_negative and not rmi_negative[1]
    label.new(bar_index,rmi_max+(rmi_Band/2),"",color = color.red,size=size.small)
if rmi_positive and not rmi_positive[1]
    label.new(bar_index,rmi_min-(rmi_Band/2),"",color = color.green,size=size.small,style= label.style_label_up)

plotcandle(open, high, low, close,color = Barcol,wickcolor = Barcol,bordercolor  = Barcol)
barcolor(color = Barcol)


// SPOT Trading Alerts
//alertcondition(positive and not positive[1],"BUY")
//alertcondition(negative and not negative[1],"SELL")

rmi_buy = rmi_positive and not rmi_positive[1]
rmi_sell = rmi_negative and not rmi_negative[1]

// end rmi trend
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}




//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// JMA
// Inputs //
src = input(close, title="Source", inline="1")
Length = input.int(title="Length", defval=20)
Phase = input.int(title="Phase", defval=0)
//code from library
jmapow(src, len) =>
    upperBand = src
    lowerBand = src
    
    // Volatility
    del1 = src - nz(upperBand[1], src)
    del2 = src - nz(lowerBand[1], src)
    volty = math.abs(del1) == math.abs(del2) ? 0 : math.max(math.abs(del1), math.abs(del2))
    
    // Incremental sum of Volty
    vSum = 0.0
    vSum := nz(vSum[1]) + 0.1 * (volty - nz(volty[10], volty))

    // Jurik used 65
    avgLen = 65
    avgVolty = ta.sma(vSum, avgLen)
    
    // Relative price volatility
    alen = (len - 1) / 2
    len1 = math.max(math.log(math.sqrt(alen)) / math.log(2) + 2, 0)
    pow1 = math.max(len1 - 2, 0.5)
    
    rVolty = avgVolty != 0 ? volty / avgVolty : 0
    if (rVolty > math.pow(len1, 1 / pow1))
        rVolty := math.pow(len1, 1 / pow1)
    if rVolty < 1
        rVolty := 1
    
    // Jurik Bands
    pow2 = math.pow(rVolty, pow1)
    len2 = math.sqrt(alen) * len1
    bet  = len2/(len2 + 1)
    kv   = math.pow(bet, math.sqrt(pow2))
    
    upperBand := del1 > 0 ? src : src - kv * del1
    lowerBand := del2 < 0 ? src : src - kv * del2

    pow2

// @function Jurik MA
// @param src Series to use
// @param len Filtering length
// @param phase JMA Phase
// @returns Filtered series
jma(float src, int len, int phase = 50) =>
    jma = 0.0
    phaseRatio = phase < -100 ? 0.5 : phase > 100 ? 2.5 : phase / 100 + 1.5
    beta = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
    power = jmapow(src, len)
    alpha = math.pow(beta, power)
    
    // 1st stage - preliminary smoothing by adaptive EMA
    ma1 = 0.0
    ma1 := (1 - alpha) * src + alpha * nz(ma1[1])
    
    // 2nd stage - preliminary smoothing by Kalman filter
    det0 = 0.0
    det0 := (1 - beta) * (src - ma1) + beta * nz(det0[1])
    ma2 = ma1 + phaseRatio * det0
    
    // 3rd stage - final smoothing by Jurik adaptive filter
    det1 = 0.0
    det1 := math.pow(1 - alpha, 2) * (ma2 - nz(jma[1])) + math.pow(alpha, 2) * nz(det1[1])

    jma := nz(jma[1]) + det1
    jma

float out = jma(src, Length, Phase)


plotColor = out > out[1] ? color.green : color.red

jmabuycondition = out > out[1]
jmasellcondition = out < out[1]

// Additional JMA 1
src1 = input(close, title="Source 1", inline="2")
Length1 = input.int(title="Length 1", defval=100)
Phase1 = input.int(title="Phase 1", defval=0)
out1 = jma(src1, Length1, Phase1)
plotColor1 = out1 > out1[1] ? color.blue : color.orange

jmabuycondition1 = out1 > out1[1]
jmasellcondition1 = out1 < out1[1]

// Additional JMA 2
src2 = input(close, title="Source 2", inline="3")
Length2 = input.int(title="Length 2", defval=200)
Phase2 = input.int(title="Phase 2", defval=0)
out2 = jma(src2, Length2, Phase2)
plotColor2 = out2 > out2[1] ? color.purple : color.yellow

jmabuycondition2 = out2 > out2[1]
jmasellcondition2 = out2 < out2[1]

// jma plots
showJMAPlot = input.bool(false, "Show JMA Plot")
plot(showJMAPlot ? out : na, "JMA", color=plotColor, linewidth=2)

showJMA1Plot = input.bool(false, "Show JMA 1 Plot")
plot(showJMA1Plot ? out1 : na, "JMA 1", color=plotColor1, linewidth=2)

showJMA2Plot = input.bool(false, "Show JMA 2 Plot")
plot(showJMA2Plot ? out2 : na, "JMA 2", color=plotColor2, linewidth=2)



// end JMA
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// adxvma

adxvma_period = input.int(220, minval=1)

ups = 0.0
downs = 0.0
index = 0.0
adxvma = 0.0
trend = 0
up = 0.0
down = 0.0

adxvma_k = 1.0 / adxvma_period

volatility = ta.atr(200)

currentUp = math.max(close[0] - close[1], 0)
currentDown = math.max(close[1] - close[0], 0)

up := (1 - adxvma_k) * nz(up[1]) + adxvma_k * currentUp[0]
down := (1 - adxvma_k) * nz(down[1]) + adxvma_k * currentDown[0]

adxvma_sum = up[0] + down[0]

fractionUp = 0.0
fractionDown = 0.0

if adxvma_sum > 0.0
    fractionUp := up[0] / adxvma_sum
    fractionDown := down[0] / adxvma_sum
    fractionDown

ups := (1 - adxvma_k) * nz(ups[1]) + adxvma_k * fractionUp
downs := (1 - adxvma_k) * nz(downs[1]) + adxvma_k * fractionDown

normDiff = math.abs(ups[0] - downs[0])
normSum = ups[0] + downs[0]


normFraction = if normSum > 0.0
    normDiff / normSum

index := (1 - adxvma_k) * nz(index[1]) + adxvma_k * normFraction
ups := (1 - adxvma_k) * nz(ups[1]) + adxvma_k * fractionUp
downs := (1 - adxvma_k) * nz(downs[1]) + adxvma_k * fractionDown

epsilon = 0.1 * nz(volatility[1])
hhp = ta.highest(index, adxvma_period)[1]
llp = ta.lowest(index, adxvma_period)[1]

hhv = math.max(index[0], hhp)
llv = math.min(index[0], llp)

vIndex = 0.0

if hhv - llv > 0.0
    vIndex := (index[0] - llv) / (hhv - llv)
    vIndex

adxvma := (1 - adxvma_k * vIndex) * nz(adxvma[1]) + adxvma_k * vIndex * close[0]

lcolor = color.lime

if nz(trend[1]) > -1 and adxvma[0] > nz(adxvma[1])
    trend := 1
    lcolor = color.black
    lcolor
else
    if nz(trend[1]) < 1 and adxvma[0] < nz(adxvma[1])
        trend := -1
        lcolor := color.red
        lcolor
    else
        trend := 0
        lcolor := color.yellow
        lcolor

showAdxvmaPlot = input.bool(false, "Show ADXVMA Plot")
plot(showAdxvmaPlot ? adxvma : na, color=color.new(lcolor, 0), linewidth=3)

ADXVMAbuy = trend == 1
ADXVMAsell = trend == -1

// end adxvma
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// volume fight

ma = input.int(60, 'Search_range', minval=1, tooltip='The range of estimation of the predominance of bullish or bearish volume (quantity bars). The smaller the TF, the higher the range value should be used to filter out false signals.')
delta = input.float(15, 'Smoothing_for_flat,%', step=0.5, minval=0, tooltip='Smoothing to reduce false signals and highlight the flat zone. If you set the percentage to zero, the flat zones will not be highlighted, but there will be much more false signals, since the indicator becomes very sensitive when the smoothing percentage decreases.')
//bgshow = input.bool(false, 'Show background zones', tooltip='Show the color background of the current trading zone.')
all_signal_show = input.bool(false, 'Show each setup in zone', tooltip='Show and use signals every time in trading zone.')

/////   CALCULATION
bull_vol = open < close ? volume : volume * (high - open) / (high - low)  //determine the share of bullish volume
bear_vol = open > close ? volume : volume * (open - low) / (high - low)  //determine the share of bearish volume
avg_bull_vol = ta.vwma(bull_vol, ma)  //determine vwma
avg_bear_vol = ta.vwma(bear_vol, ma)
diff_vol = ta.sma(avg_bull_vol / volume - 1 - (avg_bear_vol / volume - 1), ma)  //normalize and smooth the values
vol_flat = math.abs(avg_bull_vol + avg_bear_vol) / 2  //determine average value for calculation flat-filter

/////   SIGNALS
volfight_up = int(na)  //variables
volfight_up := nz(volfight_up[1])
volfight_dn = int(na)
volfight_dn := nz(volfight_dn[1])
bull = avg_bull_vol > avg_bear_vol and vol_flat / avg_bull_vol < 1 - delta / 100  //determine up zones
bear = avg_bull_vol < avg_bear_vol and vol_flat / avg_bear_vol < 1 - delta / 100  //determine dn zones
if bull
    volfight_up += 1
    volfight_dn := 0
    volfight_dn
if bear
    volfight_dn += 1
    volfight_up := 0
    volfight_up
if not bull and not bear and all_signal_show
    volfight_up := 0
    volfight_dn := 0
    volfight_dn


/////   PLOTTING
//plotshape(bull and volfight_up == 1, 'UP', location=location.bottom, style=shape.triangleup, color=color.new(color.green, 0), size=size.tiny)
//plotshape(bear and volfight_dn == 1, 'DN', location=location.top, style=shape.triangledown, color=color.new(color.red, 0), size=size.tiny)
//bgcolor(title='Trading zones', color=bgshow and avg_bull_vol > avg_bear_vol and vol_flat / avg_bull_vol < 1 - delta / 100 ? color.new(color.green, 85) : bgshow and avg_bull_vol < avg_bear_vol and vol_flat / avg_bear_vol < 1 - delta / 100 ? color.new(color.red, 85) : na, transp=90)
//plot(diff_vol, 'Volume difference', style=plot.style_area, color=avg_bull_vol > avg_bear_vol and vol_flat / avg_bull_vol < 1 - delta / 100 ? color.new(color.green, 0) : avg_bull_vol < avg_bear_vol and vol_flat / avg_bear_vol < 1 - delta / 100 ? color.new(color.red, 0) : color.new(color.gray, 50))

volfightbuy = bull
volfightsell = bear

// end volume fight
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// supertrend
groupTitleSTFilter = "ST Filter"
tf1 = input.timeframe('240', title='Timeframe 1', group = groupTitleSTFilter)
tf2 = input.timeframe('240', title='Timeframe 2', group = groupTitleSTFilter)

length = input(title='ATR Period', defval=50)
mult = input.float(title='ATR Multiplier', step=0.1, defval=5.0)
showLabels = input(title='Show Buy/Sell Labels ?', defval=true)
useClose = input(title='Use Close Price for Extremums ?', defval=true)
highlightState = input(title='Highlight State ?', defval=true)


atr = mult * ta.atr(length)

longStop = (useClose ? ta.highest(close, length) : ta.highest(length)) - atr
longStopPrev = nz(longStop[1], longStop)
longStop := close[1] > longStopPrev ? math.max(longStop, longStopPrev) : longStop

shortStop = (useClose ? ta.lowest(close, length) : ta.lowest(length)) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop

var int dir = 1
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

var color longColor = color.green
var color shortColor = color.red

longStopPlot = plot(dir == 1 ? longStop : na, title='Long Stop', style=plot.style_linebr, linewidth=2, color=color.new(longColor, 0))
buySignal = dir == 1 and dir[1] == -1
plotshape(buySignal ? longStop : na, title='Long Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(longColor, 0))

shortStopPlot = plot(dir == 1 ? na : shortStop, title='Short Stop', style=plot.style_linebr, linewidth=2, color=color.new(shortColor, 0))
sellSignal = dir == -1 and dir[1] == 1
plotshape(sellSignal ? shortStop : na, title='Short Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(shortColor, 0))

midPricePlot = plot(ohlc4, title='', style=plot.style_circles, linewidth=0, display=display.none, editable=false)

longFillColor = highlightState ? dir == 1 ? longColor : na : na
shortFillColor = highlightState ? dir == -1 ? shortColor : na : na
fill(midPricePlot, longStopPlot, title='Long State Filling', color=longFillColor, transp=90)
fill(midPricePlot, shortStopPlot, title='Short State Filling', color=shortFillColor, transp=90)


// CE Function
ce() =>
    atr2 = mult * ta.atr(length)

    longStop2 = (useClose ? ta.highest(close, length) : ta.highest(length)) - atr2
    longStop2Prev = nz(longStop2[1], longStop2)
    longStop2 := close[1] > longStop2Prev ? math.max(longStop2, longStop2Prev) : longStop2

    shortStop2 = (useClose ? ta.lowest(close, length) : ta.lowest(length)) + atr2
    shortStop2Prev = nz(shortStop2[1], shortStop2)
    shortStop2 := close[1] < shortStop2Prev ? math.min(shortStop2, shortStop2Prev) : shortStop2

    var int dir2 = 1
    dir2 := close > shortStop2Prev ? 1 : close < longStop2Prev ? -1 : dir2

    ce = dir2 == 1 ? longStop2 : shortStop2

    [dir2, ce]

[side, ce_plot] = ce()

ce1_plot = request.security(syminfo.tickerid, tf1, ce_plot[1], barmerge.gaps_off, barmerge.lookahead_on)
ce2_plot = request.security(syminfo.tickerid, tf2, ce_plot[1], barmerge.gaps_off, barmerge.lookahead_on)


ce1 = request.security(syminfo.tickerid, tf1, side[1], barmerge.gaps_off, barmerge.lookahead_on)
ce2 = request.security(syminfo.tickerid, tf2, side[1], barmerge.gaps_off, barmerge.lookahead_on)

STlong = buySignal and ce1 > 0 and ce2 > 0
STshort = sellSignal and ce1 < 0 and ce2 < 0


// end supertrend
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}



// Date Ranges
show_table = input(true, title='Show table')
text_size_switch = input(true, title='Small text in the table')
from_month = input.int(defval=5, title='From Month', minval=1, maxval=12)
from_day = input.int(defval=1, title='From Day', minval=1, maxval=31)
from_year = input(defval=2021, title='From Year')
to_month = input.int(defval=12, title='To Month', minval=1, maxval=12)
to_day = input.int(defval=1, title='To Day', minval=1, maxval=31)
to_year = input(defval=2024, title='To Year')
start = timestamp(from_year, from_month, from_day, 00, 00)  // backtest start window
finish = timestamp(to_year, to_month, to_day, 23, 59)  // backtest finish window
window = time >= start and time <= finish ? true : false  // create function "within window of time"


// Triggers
long_trigger = input(title='Long trigger value', defval=100)
short_trigger = input(title='Short trigger value', defval=-100)
trigger = input(title='Enter trigger', defval=close)

var current_so = 0
var current_S_so = 0
var initial_order = 0.0
var initial_S_order = 0.0
var original_ttp_value = 0.0
var quantity = 0.0
var entry_price = 0.0
var firstBarTime = 0.0
var maxDiffDays = 0.0
var soCount = 0
var SO1 = 0
var SO2 = 0
var SO3 = 0
var SO4 = 0
var SO5 = 0
var SO6 = 0
var SO7 = 0
var noSO = 0
var initial_price = 0.0
var initial_S_price = 0.0
var price_drop = 0.0
var price_pump = 0.0
var max_drop = 0.0
var max_pump = 0.0
var pump_date = 0
var pump_month = 0
var drop_date = 0
var drop_month = 0
var longest_trade_day = 0
var longest_trade_month = 0
var take_profit_level = 0.0
var take_S_profit_level = 0.0
var tp_plot = 0.0
var tp_S_plot = 0.0
var threshold = 0.0
var S_threshold = 0.0
timeDiff = time - firstBarTime
maxDev = 0.0
maxSDev = 0.0
closedTrades = 0
var tradeCount = 0
var i = 0
var avg_price = 0.0
var total_funds_in_trade = 0.0
var total_qty_in_trade = 0.0
var capital = 100.0

// Turn that time difference into days
diffDays = timeDiff / 86400000

// Calculate our TP levels
take_profit_level := avg_price * (1 + take_profit)
take_S_profit_level := avg_price * (1 - take_S_profit)


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//Long and short entry
//Strategy Inputs
groupTitleLongEntry = "Long Entry"
rmi_buyInput = input.bool(true, "RMI Buy", group = groupTitleLongEntry)
jma_buyInput = input.bool(true, "JMA Buy", group = groupTitleLongEntry)
jma1_buyInput = input.bool(true, "JMA1 Buy", group = groupTitleLongEntry)
jma2_buyInput = input.bool(true, "JMA2 Buy", group = groupTitleLongEntry)
adxvma_buyInput = input.bool(true, "ADXVMA Buy", group = groupTitleLongEntry)
volfightbuyInput = input.bool(true, "Volume Fight Buy", group = groupTitleLongEntry)
ST_buyInput = input.bool(true, "ST Buy", group = groupTitleLongEntry)

groupTitleShortEntry = "Short Entry"
rmi_sellInput = input.bool(true, "RMI Sell", group = groupTitleShortEntry)
jma_sellInput = input.bool(true, "JMA Sell", group = groupTitleShortEntry)
jma1_sellInput = input.bool(true, "JMA1 Sell", group = groupTitleShortEntry)
jma2_sellInput = input.bool(true, "JMA2 Sell", group = groupTitleShortEntry)
adxvma_sellInput = input.bool(true, "ADXVMA Sell", group = groupTitleShortEntry)
volfightsellInput = input.bool(true, "Volume Fight Sell", group = groupTitleShortEntry)
ST_sellInput = input.bool(true, "ST Sell", group = groupTitleShortEntry)

// First Position
for i = 0 to max_safe_order - 1 by 1
    maxDev := int((maxDev + price_deviation * 100 * math.pow(safe_order_step_scale, i)) * 100) / 100
    maxDev
for i = 0 to max_S_safe_order - 1 by 1
    maxSDev := int((maxSDev + price_S_deviation * 100 * math.pow(safe_S_order_step_scale, i)) * 100) / 100
    maxSDev

strategy.close_all(math.abs(strategy.position_size) != 0 and current_so[1] == 0)

if long and strategy.position_size == 0 and source_function(source_type) > 0 and window and not(hour(time) == 0 and minute(time) < 59) and (rmi_buyInput ? rmi_buy : true) and (jma_buyInput ? jmabuycondition : true) and (jma1_buyInput ? jmabuycondition1 : true) and (jma2_buyInput ? jmabuycondition2 : true) and (adxvma_buyInput ? ADXVMAbuy : true) and (volfightbuyInput ? volfightbuy : true) and (ST_buyInput ? STlong : true)
    _string_long = ID + ',long,' + syminfo.ticker + ',risk=' + str.tostring(base_order/10000)
    strategy.entry('Long @' + str.tostring(source_function(source_type)), strategy.long, qty=base_order, alert_message=_string_long)
    initial_order := source_function(source_type)
    current_so := 1
    initial_price := close
    price_drop := close
    original_ttp_value := 0
    firstBarTime := time
    tradeCount += 1
    avg_price := close
    total_funds_in_trade := avg_price * base_order
    total_qty_in_trade := base_order
    total_qty_in_trade


else if short and strategy.position_size == 0 and source_function(source_type) > 0 and window and not(hour(time) == 0 and minute(time) < 59) and (rmi_sellInput ? rmi_sell : true) and (jma_sellInput ? jmasellcondition : true) and (jma1_sellInput ? jmasellcondition1 : true) and (jma2_sellInput ? jmasellcondition2 : true) and (adxvma_sellInput ? ADXVMAsell : true) and (volfightsellInput ? volfightsell : true) and (ST_sellInput ? STshort : true)
    _string_short = ID + ',short,' + syminfo.ticker + ',risk=' + str.tostring(base_S_order/10000)
    strategy.entry('Short @' + str.tostring(source_function(source_type)), strategy.short, qty=base_S_order, alert_message=_string_short)
    initial_S_order := source_function(source_type)
    current_so := 1
    firstBarTime := time
    tradeCount += 1
    initial_S_price := close
    price_pump := close
    avg_price := close
    total_funds_in_trade := avg_price * base_S_order
    total_qty_in_trade := base_S_order
    total_qty_in_trade


//makes the red and green line plot pretty at the position opening
if strategy.position_size == 0
    threshold := low[1]
    S_threshold := high[1]
    S_threshold

//Safety order levels

//Long
if strategy.position_size > 0 and i == 0
    if safe_order_step_scale == 1.0
        threshold := initial_order - initial_order * price_deviation * safe_order_step_scale * current_so
        threshold
    else
        threshold := initial_order - initial_order * (price_deviation * (math.pow(safe_order_step_scale, current_so) - 1) / (safe_order_step_scale - 1))
        threshold
//Short
else if strategy.position_size < 0 and i == 0
    if safe_S_order_step_scale == 1.0
        S_threshold := initial_S_order * (1 + price_S_deviation * current_so)
        S_threshold
    else
        S_threshold := initial_S_order * (1 + price_S_deviation * (math.pow(safe_S_order_step_scale, current_so) - 1) / (safe_S_order_step_scale - 1))
        S_threshold




// Average Down
if current_so > 0 and i == 0 and strategy.position_size > 0 and low <= threshold and current_so <= max_safe_order and not(hour(time) == 0 and minute(time) < 59)
    _string_long_so = str.replace(ID, " ", "") + ',long,' + str.replace(syminfo.ticker, " ", "") + ',risk=' + str.tostring((safe_order * math.pow(safe_order_volume_scale, current_so - 1)) / 10000)
    strategy.entry('SO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.long, qty=safe_order * math.pow(safe_order_volume_scale, current_so - 1), alert_message=_string_long_so)
    total_funds_in_trade += threshold * safe_order * math.pow(safe_order_volume_scale, current_so - 1)
    total_qty_in_trade += safe_order * math.pow(safe_order_volume_scale, current_so - 1)
    avg_price := total_funds_in_trade / total_qty_in_trade
    current_so += 1
    tradeCount += 1
    tradeCount


// Short Average Up
if current_so > 0 and i == 0 and strategy.position_size < 0 and high >= S_threshold and current_so <= max_S_safe_order and not(hour(time) == 0 and minute(time) < 59)
    _string_short_so = str.replace(ID, " ", "") + ',short,' + str.replace(syminfo.ticker, " ", "") + ',risk=' + str.tostring((safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)) / 10000)
    strategy.entry('SSO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.short, qty=safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1), alert_message=_string_short_so)
    total_funds_in_trade += S_threshold * safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)
    total_qty_in_trade += safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)
    avg_price := total_funds_in_trade / total_qty_in_trade
    current_so += 1
    tradeCount += 1
    tradeCount



// Take Profit! 
if i == 1
    strategy.close_all()
    i := 0
    i

if take_profit_level <= high and strategy.position_size > 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_close_long = ID + ',closelong,' + syminfo.ticker
    strategy.close_all(comment='Close @' + str.tostring(source_function(source_type)), alert_message=_string_close_long)
    soCount := current_so
    current_so := 0
    original_ttp_value := 0
    price_drop := na
    initial_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        longest_trade_day := dayofmonth
        longest_trade_month := month
        longest_trade_month
    i := 1
    initial_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_profit / 100)
    capital


// Take Short Profit! 
if take_S_profit_level >= low and strategy.position_size < 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_close_short = ID + ',closeshort,' + syminfo.ticker
    strategy.close_all(comment='Close Short @' + str.tostring(source_function(source_type)), alert_message=_string_close_short)
    soCount := current_so
    current_so := 0
    price_pump := na
    initial_S_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        maxDiffDays
    initial_S_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_S_profit / 100)
    capital


// Stop Condition for Long
if STshort and strategy.position_size > 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_exit_long = ID + ',closelong,' + syminfo.ticker
    strategy.close_all(comment='Stop Exit Long @' + str.tostring(source_function(source_type)), alert_message=_string_exit_long)
    soCount := current_so
    current_so := 0
    original_ttp_value := 0
    price_drop := na
    initial_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        longest_trade_day := dayofmonth
        longest_trade_month := month
        longest_trade_month
    i := 1
    initial_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_profit / 100)
    capital

    //alert('6700960415957,closelong,' + syminfo.ticker, alert.freq_once_per_bar)

// Stop Condition for Short
if STlong and strategy.position_size < 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_exit_short = ID + ',closeshort,' + syminfo.ticker
    strategy.close_all(comment='Stop Exit Short @' + str.tostring(source_function(source_type)), alert_message=_string_exit_short)
    soCount := current_so
    current_so := 0
    price_pump := na
    initial_S_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        maxDiffDays
    i := 1
    initial_S_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_S_profit / 100)
    capital

    //alert('6700960415957,closeshort,' + syminfo.ticker, alert.freq_once_per_bar)

//Table building and calculations
if strategy.position_size == 0
    if soCount == 1
        noSO += 1
        noSO
    else if soCount == 2
        SO1 += 1
        SO1
    else if soCount == 3
        SO2 += 1
        SO2
    else if soCount == 4
        SO3 += 1
        SO3
    else if soCount == 5
        SO4 += 1
        SO4
    else if soCount == 6
        SO5 += 1
        SO5
    else if soCount == 7
        SO6 += 1
        SO6
    else if soCount == 8
        SO7 += 1
        SO7
    soCount := 0
    soCount
closedTrades := noSO + SO1 * 2 + SO2 * 3 + SO3 * 4 + SO4 * 5 + SO5 * 6 + SO6 * 7 + SO7 * 8

if low < price_drop and window and strategy.position_size > 0
    price_drop := low
    if max_drop < int((1 - price_drop / initial_price) * 10000) / 100
        max_drop := int((1 - price_drop / initial_price) * 10000) / 100
        drop_date := dayofmonth(time)
        drop_month := month(time)
        drop_month
bgcolor(max_drop[1] < max_drop ? color.rgb(11, 90, 100, 89) : na, transp=50)

if high > price_pump and window and strategy.position_size < 0
    price_pump := high
    if max_pump < int((price_pump / initial_S_price - 1) * 10000) / 100
        max_pump := int((price_pump / initial_S_price - 1) * 10000) / 100
        pump_date := dayofmonth(time)
        pump_month := month(time)
        pump_month
bgcolor(max_pump[1] < max_pump ? color.rgb(155, 39, 176, 90) : na, transp=70)

if take_profit_level > 0 and strategy.position_size > 0
    tp_plot := take_profit_level
    tp_plot
else
    tp_plot := close
    tp_plot

if take_S_profit_level > 0 and strategy.position_size < 0
    tp_S_plot := take_S_profit_level
    tp_S_plot
else
    tp_S_plot := close
    tp_S_plot

//Plotting the levels
p1 = plot(tp_plot, color=strategy.position_size <= 0 ? na : #00ff00)
p2 = plot(avg_price, color=strategy.position_size == 0 ? na : color.white)
p3 = plot(threshold, color=strategy.position_size <= 0 ? na : #ff0000)
p4 = plot(tp_S_plot, color=strategy.position_size >= 0 ? na : #00ff00)
p5 = plot(S_threshold, color=strategy.position_size >= 0 ? na : #ff0000)
fill(p1, p2, color=strategy.position_size > 0 ? color.rgb(76, 175, 79, 82) : na, transp=90)
fill(p2, p3, strategy.position_size > 0 ? color.rgb(255, 82, 82, 74) : na, transp=90)
fill(p4, p2, color=strategy.position_size < 0 ? color.rgb(76, 175, 79, 84) : na, transp=90)
fill(p5, p2, color=strategy.position_size < 0 ? color.rgb(255, 82, 82, 84) : na, transp=90)
profit_color = strategy.openprofit < 0 ? color.red : color.green

text_size = text_size_switch ? size.small : size.normal

// plot(strategy.opentrades)
// plot(current_so, color = color.yellow)
// plot(abs(strategy.position_size), color = color.red)
// plot(quantity, color=color.purple)

//Table formatting
if show_table
    var Table = table.new(position.bottom_right, columns=2, rows=20, border_width=1, bgcolor=color.black, border_color=color.gray)
    table.cell(table_id=Table, column=0, row=0, text_color=color.gray, text_size=text_size, text='Net Profit')
    table.cell(table_id=Table, column=1, row=0, text=str.tostring(int((capital - 100) * 100) / 100) + '%', text_size=text_size, text_color=color.lime)
    table.cell(table_id=Table, column=0, row=1, text_color=color.gray, text_size=text_size, text='Max Deviation ')
    table.cell(table_id=Table, column=1, row=1, text=str.tostring(maxDev) + '%', text_size=text_size, text_color=color.orange)
    table.cell(table_id=Table, column=0, row=2, text_color=color.gray, text_size=text_size, text='Max Short Dev ')
    table.cell(table_id=Table, column=1, row=2, text=str.tostring(maxSDev) + '%', text_size=text_size, text_color=color.orange)
    table.cell(table_id=Table, column=0, row=3, text='No SO ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=3, text=str.tostring(noSO), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=4, text='SO 1 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=4, text=str.tostring(SO1), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=5, text='SO 2 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=5, text=str.tostring(SO2), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=6, text='SO 3 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=6, text=str.tostring(SO3), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=7, text='SO 4 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=7, text=str.tostring(SO4), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=8, text='SO 5 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=8, text=str.tostring(SO5), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=9, text='SO 6 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=9, text=str.tostring(SO6), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=10, text='SO 7 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=10, text=str.tostring(SO7), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=11, text='Closed/Open trades', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=11, text=str.tostring(strategy.closedtrades) + '/' + str.tostring(strategy.opentrades), text_size=text_size, text_color=color.olive)
    table.cell(table_id=Table, column=0, row=12, text='Current Deal Time', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=12, text=strategy.position_size != 0 ? str.tostring(int((time - firstBarTime) / 8640000) / 10) + ' days' : '0', text_size=text_size, text_color=color.green)
    table.cell(table_id=Table, column=0, row=13, text='Unrealized position', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=13, text=str.tostring(int(strategy.openprofit / (strategy.initial_capital + strategy.netprofit) * 10000) / 100) + ' %', text_size=text_size, text_color=profit_color)
    table.cell(table_id=Table, column=0, row=14, text='Longest deal:', text_size=text_size, text_color=color.orange)
    table.cell(table_id=Table, column=1, row=14, text=str.tostring(int(maxDiffDays / 8640000) / 10) + ' days, ' + str.tostring(longest_trade_day) + '/' + str.tostring(longest_trade_month), text_size=text_size, text_color=color.red)
    table.cell(table_id=Table, column=0, row=15, text='Max price drop:', text_size=text_size, text_color=color.orange)
    table.cell(table_id=Table, column=1, row=15, text=str.tostring(max_drop) + ' %, ' + str.tostring(drop_date) + '/' + str.tostring(drop_month), text_size=text_size, text_color=color.red)
    table.cell(table_id=Table, column=0, row=16, text='Max price pump:', text_size=text_size, text_color=color.orange)
    table.cell(table_id=Table, column=1, row=16, text=str.tostring(max_pump) + ' %, ' + str.tostring(pump_date) + '/' + str.tostring(pump_month), text_size=text_size, text_color=color.red)

