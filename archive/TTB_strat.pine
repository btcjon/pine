//@version=5
strategy("TTB Strategy", overlay = true)

// User inputs
var input strategyType = input("Long", title="Strategy Type", options=["Long", "Short"])
var input fastLength = input(9, title="Fast EMA Length")
var input slowLength = input(21, title="Slow EMA Length")
var input entrySize = input(0.01, title="Entry Size in Lots")
var input maxSO = input(3, title="Max number of SOs")
var input firstSO = input(0.05, title="1st SO (%)")
var input stepScale = input(2, title="Step Scale")
var input soSize = input(0.01, title="SO Size")
var input volumeScale = input(1.5, title="Volume Scale")
var input takeProfit = input(0.1, title="Take Profit%")

// Calculate EMAs
fastEMA = ta.ema(close, fastLength)
slowEMA = ta.ema(close, slowLength)

// Entry conditions
longCondition = ta.crossover(fastEMA, slowEMA)
shortCondition = ta.crossunder(fastEMA, slowEMA)

// Strategy type conditions
if (strategyType == "Long" and longCondition)
    strategy.entry("Buy", strategy.long, qty = entrySize)
else if (strategyType == "Short" and shortCondition)
    strategy.entry("Sell", strategy.short, qty = entrySize)

// Safety Orders (SOs)
var float entryPrice = na
if (strategyType == "Long" and longCondition)
    entryPrice := close
else if (strategyType == "Short" and shortCondition)
    entryPrice := close

for i = 1 to maxSO
    var float soPrice = na
    var float soSizeScaled = na
    if (strategyType == "Long")
        soPrice := entryPrice * (1 - firstSO * stepScale ^ (i - 1))
        soSizeScaled := soSize * volumeScale ^ (i - 1)
        strategy.order("SO" + tostring(i), strategy.long, qty = soSizeScaled, limit = soPrice)
    else if (strategyType == "Short")
        soPrice := entryPrice * (1 + firstSO * stepScale ^ (i - 1))
        soSizeScaled := soSize * volumeScale ^ (i - 1)
        strategy.order("SO" + tostring(i), strategy.short, qty = soSizeScaled, limit = soPrice)

// Take Profit
var float tpPrice = na
if (strategyType == "Long")
    tpPrice := entryPrice * (1 + takeProfit)
    strategy.exit("TP", "Buy", limit = tpPrice)
else if (strategyType == "Short")
    tpPrice := entryPrice * (1 - takeProfit)
    strategy.exit("TP", "Sell", limit = tpPrice)

// Plot EMAs
plot(fastEMA, "Fast EMA", color=color.red)
plot(slowEMA, "Slow EMA", color=color.blue)

//This script has the basic structure of my strategy. It calculates the EMAs and uses them to generate entry signals. It also places Safety Orders (SOs) and sets a Take Profit level. However, there are several things missing:

// I have a complex script example that accomplishes these tasks and I would like you to study how it is implemented to learn how we can implement the following features into our script.

// 1. Recalculation of average entry price: The script currently uses the initial entry price to calculate the SO prices and the Take Profit level. However, you mentioned that the strategy should recalculate the average entry price whenever a SO is filled. This requires tracking the filled orders and their prices, and recalculating the average entry price. 

// 2. Preventing new entries until trade is closed: The script currently does not prevent new entry signals from occurring while a trade is open. This can be accomplished by using a boolean variable to track whether a trade is open, and checking this variable before generating entry signals.

// 3. Ignoring opposite signals: The script currently does not ignore "short" signals when the user chooses "long", and vice versa. This can be accomplished by adding additional conditions to the entry signal checks.

// 4. Safety Orders (SOs) activation: The script currently places all SOs at the start of the trade. However, you mentioned that SOs should be activated when the price goes against the initial entry. This requires tracking the price movement and placing SOs when certain conditions are met. 

// 5. Take Profit level adjustment: The script currently sets the Take Profit level at the start of the trade and does not adjust it. However, you mentioned that the Take Profit level should be adjusted whenever a SO is filled. This requires tracking the filled orders and adjusting the Take Profit level. 
