// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © thetradingbot

//1. Account Balance (initial_capital): $1,000,000
//2. Order Quantity Type (default_qty_type): Cash (strategy.cash)
//3. Order Quantity Value (default_qty_value): 1 standard lot in Forex = $100,000
//4. Leverage: 1:500
//5. Maximum Position Value: Account Balance Leverage = $1,000,000 500 = $500,000,000
//6. Maximum Lots: Maximum Position Value / Order Quantity Value = $500,000,000 / $100,000 = 5000 lots

//So, with an account balance of $1,000,000 and 1:500 leverage, you can open positions up to $500,000,000 in total value, which is equivalent to 5000 standard lots in Forex.

//@version=5
strategy("TTB Struc-Strat Direct2", overlay=true, initial_capital=1000000, default_qty_type=strategy.cash, default_qty_value=100000)

// Define your date range
FromYear = input(2020, "From Year")
FromMonth = input(1, "From Month")
FromDay = input(1, "From Day")
ToYear = input(2025, "To Year")
ToMonth = input(12, "To Month")
ToDay = input(31, "To Day")

start = timestamp(FromYear, FromMonth, FromDay, 00, 00) // Start of the period
end = timestamp(ToYear, ToMonth, ToDay, 23, 59) // End of the period

// Check if the current bar is in the defined date range
inDateRange = time >= start and time <= end

Lots =  input.float(1.01, title='Lots', step=0.01, minval=0.01)
ID = input(defval='6700960415957', title='ID')
Comment = input.string("Structure1R", title='Comment', inline='Comment')

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
MSlength  = input(1, 'Pivot Lookback')
incr    = input.float(80, 'Increment Factor %', minval = 0)
resetOn = input.string('CHoCH', 'Reset Stop On', options = ['CHoCH', 'All'])
showMS  = input(true, "Show Structures")

//Style
bullCss    = color.teal
bearCss    = color.red
retCss     = #ffd000
areaTransp = 80

//------------------------------------------------------------------------------
//Global variables
//-----------------------------------------------------------------------------{
var float ph_y = na , var int ph_x = na
var float pl_y = na , var int pl_x = na
var float top = na  , var float btm = na
var ph_cross = false, var pl_cross = false

var float max = na
var float min = na
var float ts = na

var os = 0
ms = 0

//------------------------------------------------------------------------------
//Detect pivots and get coordinates
//-----------------------------------------------------------------------------{
n = bar_index
ph = ta.pivothigh(MSlength, MSlength)
pl = ta.pivotlow(MSlength, MSlength)

if ph 
    ph_y := ph
    ph_x := n - MSlength
    ph_cross := false

if pl 
    pl_y := pl
    pl_x := n - MSlength
    pl_cross := false

//-----------------------------------------------------------------------------}
//Bullish structures
//-----------------------------------------------------------------------------{
if close > ph_y and not ph_cross
    if resetOn == 'CHoCH'
        ms := os == -1 ? 1 : 0
    else
        ms := 1

    ph_cross := true

    //Highilight bullish MS
    if showMS
        line.new(ph_x, ph_y, n, ph_y
          , color = bullCss
          , style = os == -1 ? line.style_dashed : line.style_dotted)

    os := 1

    //Search for local minima
    btm := low
    for i = 0 to (n - ph_x)-1
        btm := math.min(low[i], btm)

    osChange = os != os[1]

    // Open long position (close short if any)
    // if os == 1 and osChange and inDateRange and not(hour(time) == 0 and minute(time) < 59) 
    //     _string_close_short = ID + ',closeshort,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"'
    //     strategy.close("Short Position", alert_message=_string_close_short)
    //     _string_long = ID + ',long,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"'
    //     strategy.entry("Long Position", strategy.long, alert_message=_string_long)

//-----------------------------------------------------------------------------}
//Bearish structures
//-----------------------------------------------------------------------------{
if close < pl_y and not pl_cross
    if resetOn == 'CHoCH'
        ms := os == 1 ? -1 : 0
    else
        ms := -1

    pl_cross := true

    //Highilight bearish MS
    if showMS
        line.new(pl_x, pl_y, n, pl_y
          , color = bearCss
          , style = os == 1 ? line.style_dashed : line.style_dotted)

    os := -1

    //Search for local maxima
    top := high
    for i = 0 to (n - pl_x)-1
        top := math.max(high[i], top)

    osChange = os != os[1]

    // Open short position (close long if any)
    // if os == -1 and osChange and inDateRange and not(hour(time) == 0 and minute(time) < 59) 
    //     _string_close_long = ID + ',closelong,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"'
    //     strategy.close("Long Position", alert_message=_string_close_long)
    //     _string_short = ID + ',short,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"'
    //     strategy.entry("Short Position", strategy.short, alert_message=_string_short)

//-----------------------------------------------------------------------------}
//Trailing stop
//-----------------------------------------------------------------------------{
//Trailing max/min
if ms == 1
    max := close
else if ms == -1
    min := close
else
    max := math.max(close, max)
    min := math.min(close, min)

//Trailing stop
ts := ms == 1 ? btm
  : ms == -1 ? top
  : os == 1 ? ts + (max - max[1]) * incr / 100
  : ts + (min - min[1]) * incr / 100

//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
css = ms ? na 
  : os == 1 ? bullCss
  : bearCss

plot_price = plot(close, editable = false, display = display.none)
plot_ts    = plot(ts, 'Trailing Stop', color = css)

css_area = (close - ts) * os < 0 ? retCss
  : css

fill(plot_price, plot_ts, color.new(css_area, areaTransp))

// trend change plots
osChange = os != os[1]

trendUp = os == 1 and osChange
trendDown = os == -1 and osChange

plotshape(series=trendUp, title="Up Trend", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.tiny)
plotshape(series=trendDown, title="Down Trend", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.tiny)

//-----------------------------------------------------------------------------}
// Begin ADXVNA

adxvma_period = input.int(4, minval=1)
showADXVMAPlot = input(defval=false, title="Show ADXVMA Plot")

ups = 0.0
downs = 0.0
index = 0.0
adxvma = 0.0
trend = 0
up = 0.0
down = 0.0

k = 1.0 / adxvma_period

volatility = ta.atr(200)

currentUp = math.max(close[0] - close[1], 0)
currentDown = math.max(close[1] - close[0], 0)

up := (1 - k) * nz(up[1]) + k * currentUp[0]
down := (1 - k) * nz(down[1]) + k * currentDown[0]

sum = up[0] + down[0]

fractionUp = 0.0
fractionDown = 0.0

if sum > 0.0
    fractionUp := up[0] / sum
    fractionDown := down[0] / sum
    fractionDown

ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

normDiff = math.abs(ups[0] - downs[0])
normSum = ups[0] + downs[0]


normFraction = if normSum > 0.0
    normDiff / normSum

index := (1 - k) * nz(index[1]) + k * normFraction
ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

epsilon = 0.1 * nz(volatility[1])
hhp = ta.highest(index, adxvma_period)[1]
llp = ta.lowest(index, adxvma_period)[1]

hhv = math.max(index[0], hhp)
llv = math.min(index[0], llp)

vIndex = 0.0

if hhv - llv > 0.0
    vIndex := (index[0] - llv) / (hhv - llv)
    vIndex

adxvma := (1 - k * vIndex) * nz(adxvma[1]) + k * vIndex * close[0]

lcolor = color.lime

if nz(trend[1]) > -1 and adxvma[0] > nz(adxvma[1])
    trend := 1
    lcolor = color.black
    lcolor
else
    if nz(trend[1]) < 1 and adxvma[0] < nz(adxvma[1])
        trend := -1
        lcolor := color.red
        lcolor
    else
        trend := 0
        lcolor := color.yellow
        lcolor


plot(showADXVMAPlot ? adxvma : na, color=color.new(lcolor, 0), linewidth=3)

not_flat = trend != 0


// End ADXVMA

///Strategy Inputs
groupTitleFilters = "Strategy Filters"
flat_filter = input.bool(false, "ADXVMA Flat Filter", group = groupTitleFilters)

// Open long position (close short if any)

if trendUp and inDateRange and not(hour(time) == 0 and minute(time) < 59) 
    _string_close_short = ID + ',closeshort,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"'
    strategy.close("Short Position", alert_message=_string_close_short)

if trendUp and inDateRange and not(hour(time) == 0 and minute(time) < 59) and (flat_filter ? not_flat : true) 
    _string_long = ID + ',long,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"'
    strategy.entry("Long Position", strategy.long, alert_message=_string_long)



    // Open short position (close long if any)
if trendDown and inDateRange and not(hour(time) == 0 and minute(time) < 59) 
    _string_close_long = ID + ',closelong,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"'
    strategy.close("Long Position", alert_message=_string_close_long)

if trendDown and inDateRange and not(hour(time) == 0 and minute(time) < 59) and (flat_filter ? not_flat : true) 
    _string_short = ID + ',short,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"'
    strategy.entry("Short Position", strategy.short, alert_message=_string_short)