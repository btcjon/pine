//@version=5
strategy('TTB DCA 8.0L', overlay=true, calc_on_order_fills=true, initial_capital=1000000, default_qty_type=strategy.cash, default_qty_value=100000, currency=currency.USD, pyramiding=999, use_bar_magnifier=true, calc_on_every_tick=false, max_bars_back=4000)

import thetradingbot/ttbcolors/1 as TTBColors
import thetradingbot/TTB_TableBuilder/1 as TTBTableBuilder

// Date Ranges
show_table = input(true, title='Show table')
text_size_switch = input(true, title='Small text in the table')
direction = input.string(defval='All', title='Trading Direction', options=['All', 'Long', 'Short'])
ID = input(defval='6700960415957', title='ID')
version = input(defval='7-2', title='version')
test = input(defval='1', title='test')
startDateTime = input.time(timestamp("1 Feb 2021 12:00"), title="Start", group="Strategy Date Range")
endDateTime = input.time(timestamp("1 Feb 2024 12:00"), title="End", group="Strategy Date Range")
window = time >= startDateTime and time <= endDateTime  // Simplified window condition
source_type = input.string('Close', 'Source', options=['Close', 'Open', 'High', 'Low'])

source_function(type) =>
    series = array.from(close, open, high, low)
    typeIndex = array.from('Close', 'Open', 'High', 'Low')
    array.get(series, array.indexof(typeIndex, type))

setDirectionLong(dir) =>
    dir == 'All' or dir == 'Long'

setDirectionShort(dir) =>
    dir == 'All' or dir == 'Short'

var long = setDirectionLong(direction)
var short = setDirectionShort(direction)

// Triggers
long_trigger = input(title='Long trigger value', defval=1)
short_trigger = input(title='Short trigger value', defval=-1)
trigger = input(title='Enter trigger', defval=close)
// Strategy Inputs
//long inputs
price_deviation = input.float(0.05, title='Price deviation to open safety orders (%)', step=0.1, minval=0.0) / 100
take_profit = input.float(0.08, title='Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_order_lots = input(0.4, title='base order')
safe_order_lots = input(0.4, title='safe order')
safe_order_volume_scale = input.float(1, step=0.1, title='Safety order volume scale')
safe_order_step_scale = input.float(1.3, step=0.1, title='Safety order step scale')
max_safe_order = input(6, title='max no. of safe orders')
//short inputs
price_S_deviation = input.float(0.5, title='Price deviation to open short safety orders (%)', step=0.1, minval=0.0) / 100
take_S_profit = input.float(0.08, title='Short Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_S_order_lots = input(0.4, title='base sell order')
safe_S_order_lots = input(0.4, title='safe sell order')
safe_S_order_volume_scale = input.float(1, step=0.1, title='Safety sell order volume scale')
safe_S_order_step_scale = input.float(1.3, step=0.1, title='Safety sell order step scale')
max_S_safe_order = input(6, title='max no. of sell safe orders')

base_order = base_order_lots * 100000
safe_order = safe_order_lots * 100000
base_S_order = base_S_order_lots * 100000
safe_S_order = safe_S_order_lots * 100000


var current_so = 0 // Current safety order for long positions
var current_S_so = 0 // Current safety order for short positions
var initial_order = 0.0
var initial_S_order = 0.0
var original_ttp_value = 0.0
var quantity = 0.0
var entry_price = 0.0
var firstBarTime = 0.0
var maxDiffDays = 0.0
var soCount = 0
var noSO = 0
var initial_price = 0.0
var initial_S_price = 0.0
var price_drop = 0.0
var price_pump = 0.0
var max_drop = 0.0
var max_pump = 0.0
var pump_date = 0
var pump_month = 0
var drop_date = 0
var drop_month = 0
var longest_trade_day = 0
var longest_trade_month = 0
var take_profit_level = 0.0
var take_S_profit_level = 0.0
var tp_plot = 0.0
var tp_S_plot = 0.0
var threshold = 0.0
var S_threshold = 0.0
timeDiff = time - firstBarTime
maxDev = 0.0
maxSDev = 0.0
closedTrades = 0
var tradeCount = 0
// Removed global variable 'i' as it is redeclared locally in loops
var avg_price = 0.0
var total_funds_in_trade = 0.0
var total_qty_in_trade = 0.0
var capital = 100.0

var SO = array.new_int(8, 0)

var entry_qty = 0.0
var so_qty = 0.0 

// Turn that time difference into days
diffDays = timeDiff / 86400000

// Calculate our TP levels
take_profit_level := avg_price * (1 + take_profit)
take_S_profit_level := avg_price * (1 - take_S_profit)


// First Position
for var i = 0 to max_safe_order - 1 by 1
    maxDev := math.round(maxDev + price_deviation * 100 * math.pow(safe_order_step_scale, i), 2)
    maxDev
for var i = 0 to max_S_safe_order - 1 by 1
    maxSDev := math.round(maxSDev + price_S_deviation * 100 * math.pow(safe_S_order_step_scale, i), 2)
    maxSDev

strategy.close_all(math.abs(strategy.position_size) != 0 and current_so[1] == 0)

if long and strategy.position_size == 0 and source_function(source_type) > 0 and window and trigger == long_trigger
    _string_long = 'type=order,order-type=long,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_order_lots) + ',comment="' + version + '-' + test + '",entry=true'
    strategy.entry('Long @' + str.tostring(source_function(source_type)), strategy.long, qty=base_order_lots * 100000, alert_message=_string_long)
    initial_order := source_function(source_type)
    current_so := 1
    initial_price := close
    price_drop := close
    original_ttp_value := 0
    firstBarTime := time
    tradeCount += 1
    avg_price := close
    total_funds_in_trade := avg_price * base_order_lots * 100000
    total_qty_in_trade := base_order_lots * 100000
    entry_qty := base_order_lots * 100000 


else if short and strategy.position_size == 0 and source_function(source_type) > 0 and window and trigger == short_trigger
    _string_short = 'type=order,order-type=short,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_S_order_lots) + ',comment="' + version + '-' + test + '",entry=true'
    strategy.entry('Short @' + str.tostring(source_function(source_type)), strategy.short, qty=base_S_order_lots * 100000, alert_message=_string_short)
    initial_S_order := source_function(source_type)
    current_so := 1
    firstBarTime := time
    tradeCount += 1
    initial_S_price := close
    price_pump := close
    avg_price := close
    total_qty_in_trade := base_S_order_lots * 100000
    entry_qty := base_S_order_lots * 100000 


//makes the red and green line plot pretty at the position opening
if strategy.position_size == 0
    threshold := low[1]
    S_threshold := high[1]
    S_threshold

//Safety order levels
//SO Long levels
// Safety order levels
longSafetyOrderLevel(initialOrder, priceDeviation, stepScale, currentSO) =>
    initialOrder - initialOrder * priceDeviation * (stepScale == 1.0 ? stepScale * currentSO : (math.pow(stepScale, currentSO) - 1) / (stepScale - 1))

threshold := strategy.position_size > 0 ? longSafetyOrderLevel(initial_order, price_deviation, safe_order_step_scale, current_so) : na
//SO Short levels
shortSafetyOrderLevel(initialOrder, priceDeviation, stepScale, currentSO) =>
    initialOrder * (1 + priceDeviation * (stepScale == 1.0 ? currentSO : (math.pow(stepScale, currentSO) - 1) / (stepScale - 1)))

S_threshold := strategy.position_size < 0 ? shortSafetyOrderLevel(initial_S_order, price_S_deviation, safe_S_order_step_scale, current_S_so) : na
// SO Long Average Down
if current_so > 0 and strategy.position_size > 0 and low <= threshold and current_so < max_safe_order
    _string_long_so = 'type=order,order-type=long,symbol=' + str.replace(syminfo.ticker, " ", "") + '.PRO' + ',risk=' + str.tostring(base_order_lots * math.pow(safe_order_volume_scale, current_so - 1)) + ',comment="' + version + '-' + test + '",entry=false'
    strategy.entry('SO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.long, qty=base_order_lots * math.pow(safe_order_volume_scale, current_so - 1), alert_message=_string_long_so)
    total_funds_in_trade := avg_price * base_order_lots * 100000
    total_qty_in_trade := base_order_lots * 100000
    entry_qty := base_order_lots * 100000 
    avg_price := total_funds_in_trade / total_qty_in_trade
    current_so += 1
    tradeCount += 1

// SO Short Average Up
if current_so > 0 and strategy.position_size < 0 and high >= S_threshold and current_so <= max_S_safe_order
    _string_short_so = 'type=order,order-type=short,symbol=' + str.replace(syminfo.ticker, " ", "") + '.PRO' + ',risk=' + str.tostring(base_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1)) + ',comment="' + version + '-' + test + '",entry=false'
    strategy.entry('SSO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.short, qty=base_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1), alert_message=_string_short_so)
    total_funds_in_trade := avg_price * base_S_order_lots * 100000
    total_qty_in_trade := base_S_order_lots * 100000
    entry_qty := base_S_order_lots * 100000 
    avg_price := total_funds_in_trade / total_qty_in_trade
    current_so += 1
    tradeCount += 1


if take_profit_level <= high[1] and strategy.position_size > 0
    strategy.close_all(comment='Take Profit')
// If there was another specific condition that 'i' was tracking, that condition should be implemented here.

if take_profit_level <= high and strategy.position_size > 0 and current_so > 0
    _string_close_long = 'type=order,order-type=closelong,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + test + '"' // Prepare the close short order string
    strategy.close_all(comment='Close Long @' + str.tostring(source_function(source_type)), alert_message=_string_close_long) 
    soCount := current_so
    current_so := 0
    original_ttp_value := 0
    price_drop := na
    initial_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        longest_trade_day := dayofmonth
        longest_trade_month := month
        longest_trade_month
    initial_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_profit / 100)

// Take Short Profit! 
if take_S_profit_level >= low and strategy.position_size < 0
    _string_close_short = 'type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + test + '"' // Prepare the close short order string
    strategy.close_all(comment='Close Short @' + str.tostring(source_function(source_type)), alert_message=_string_close_short) 
    soCount := current_so
    current_so := 0
    price_pump := na
    initial_S_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        maxDiffDays
    initial_S_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_S_profit / 100)

//Table building and calculations
if strategy.position_size == 0
    if soCount == 1
        noSO += 1
    else if soCount >= 2 and soCount <= 8
        array.set(SO, soCount - 2, array.get(SO, soCount - 2) + 1)
    soCount := 0

closedTrades := noSO
for var i = 0 to 7
    closedTrades := closedTrades + array.get(SO, i) * (i + 2)

if low < price_drop and window and strategy.position_size > 0
    price_drop := low
    if max_drop < math.round((1 - price_drop / initial_price) * 100, 2)
        max_drop := math.round((1 - price_drop / initial_price) * 100, 2)
        drop_date := dayofmonth(time)
        drop_month := month(time)

bgcolor(max_drop[1] < max_drop ? color.rgb(0, 187, 212, 96) : na, transp=50)

if high > price_pump and window and strategy.position_size < 0
    price_pump := high
    if max_pump < math.round((price_pump / initial_S_price - 1) * 100, 2)
        max_pump := math.round((price_pump / initial_S_price - 1) * 100, 2)
        pump_date := dayofmonth(time)
        pump_month := month(time)

bgcolor(max_pump[1] < max_pump ? color.rgb(155, 39, 176, 87) : na, transp=70)

if take_profit_level > 0 and strategy.position_size > 0
    tp_plot := take_profit_level
    tp_plot
else
    tp_plot := close
    tp_plot

if take_S_profit_level > 0 and strategy.position_size < 0
    tp_S_plot := take_S_profit_level
    tp_S_plot
else
    tp_S_plot := close
    tp_S_plot

//Plotting the levels
p1 = plot(tp_plot, color=strategy.position_size <= 0 ? na : TTBColors.colorUp()) // Up color
p2 = plot(avg_price, color=strategy.position_size == 0 ? na : TTBColors.colorNeutral()) // Neutral color
p3 = plot(threshold, color=strategy.position_size <= 0 ? na : TTBColors.colorDown()) // Down color
p4 = plot(tp_S_plot, color=strategy.position_size >= 0 ? na : TTBColors.colorUpPlus()) // UpPlus color
//p5 = plot(tp_S_plot2, color=strategy.position_size >= 0 ? na : TTBColors.colorUpPlus()) // UpPlus color for TP2
p6 = plot(S_threshold, color=strategy.position_size >= 0 ? na : TTBColors.colorDownPlus()) // DownPlus color
//p7 = plot(tp_plot2, color=strategy.position_size <= 0 ? na : TTBColors.colorUp()) // Up color for TP2
fill(p1, p2, color=strategy.position_size > 0 ? color.new(TTBColors.colorUp(), 90) : na) // Semi-transparent Up color
fill(p2, p3, strategy.position_size > 0 ? color.new(TTBColors.colorNeutral(), 90) : na) // Semi-transparent Neutral color
fill(p4, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorUpPlus(), 90) : na) // Semi-transparent UpPlus color
//fill(p5, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorUpPlus(), 90) : na) // Semi-transparent UpPlus color for TP2
fill(p6, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorDownPlus(), 90) : na) // Semi-transparent DownPlus color
//fill(p7, p2, color=strategy.position_size > 0 ? color.new(TTBColors.colorUp(), 90) : na) // Semi-transparent Up color for TP2

text_size = text_size_switch ? size.small : size.normal