// Â© Steversteves
//@version=5

// @description: This library provides various approaches, some novel, to forecasting and moving averages. Included is a basic ARIMA Modeller including an ARIMA based 
// Moving average Modeller, a machine learning regression modeller, and a Z-Score based Forecaster.

library("Forecasting", overlay=true) 
import Steversteves/SPTS_StatsPakLib/4 as spts 


// @function: Creates a generic autoregressive ARIMA model 
// @param x float source 
// @returns: arima_result, arima_ucl, arima_lcl, arima_cor, arima_r2, arima_err, y1, y2, y3, y0
export ARIMA_Modeller(float src) => 
	float result = 0.0 
	float cor = 0.0 
	float r2 = 0.0 
	float err = 0.0 
	float b1 = 0.0 
	float b2 = 0.0
	float b3 = 0.0 
	float b0 = 0.0 
	// Find Trend 
	cor1 = ta.correlation(time, src, 50),	cor2 = ta.correlation(time, src, 100),		cor3 = ta.correlation(time,src, 150),		cor4 = ta.correlation(time, src, 200), 		cor5 = ta.correlation(time, src, 250) 
	cor6 = ta.correlation(time, src, 300), 	cor7 = ta.correlation(time, src, 350), 		cor8 = ta.correlation(time, src, 400),		cor9 = ta.correlation(time, src, 450),		cor10 = ta.correlation(time,src, 500), 
	cor11 = ta.correlation(time, src, 550),	cor12 = ta.correlation(time,src, 600),		cor13 = ta.correlation(time, src, 650),		cor14 = ta.correlation(time, src, 700),		cor15 = ta.correlation(time, src, 750), 
	cor16 = ta.correlation(time, src, 800),	cor17 = ta.correlation(time, src, 850) 

	max_cor = math.max(cor1, cor2, cor3, cor4, cor5, cor6, cor7, cor8, cor9, cor10, cor11, cor12, cor13, cor14, cor15, cor16, cor17) 
	int trend_len = max_cor == cor1 ? 50 : max_cor == cor2 ? 100 : max_cor == cor3 ? 150 : max_cor == cor4 ? 200 : max_cor == cor5 ? 250 : max_cor == cor6 ? 300 : max_cor == cor7 ? 350 : max_cor == cor8 ? 400 : max_cor == cor9 ? 450 : max_cor == cor10 ? 500 : max_cor == cor11 ? 550 : max_cor == cor12 ? 600 : max_cor == cor13 ? 650 : max_cor == cor14 ? 650 : max_cor == cor15 ? 700 : max_cor == cor16 ? 750 : max_cor == cor17 ? 800 : 150 
	// Lag identification 
	lag1_cor = ta.correlation(src, src[1], trend_len), 	lag2_cor = ta.correlation(src, src[2], trend_len),	lag3_cor = ta.correlation(src, src[3], trend_len) 

	// Determine stationarity 
	// Lag 1 
	lag1_dif = src - src[1] 
	lag1_lag = lag1_dif[1] 
	[lag1_tstat, lag1_stationary] = spts.f_dickey_fuller_test(lag1_dif, lag1_lag, trend_len) 
	// Lag 2
	lag2_dif = src - src[2] 
	lag2_lag = lag2_dif[1] 
	[lag2_tstat, lag2_stationary] = spts.f_dickey_fuller_test(lag2_dif, lag2_lag, trend_len) 
	// Lag 3
	lag3_dif = src - src[3] 
	lag3_lag = lag3_dif[1] 
	[lag3_tstat, lag3_stationary] = spts.f_dickey_fuller_test(lag3_dif, lag3_lag, trend_len) 

	// Find high autocor 
	lagged_ar = array.new<int>() 
	if lag1_stationary == true 
		array.unshift(lagged_ar, 1) 
	if lag2_stationary == true 
		array.unshift(lagged_ar, 2) 
	if lag3_stationary == true 
		array.unshift(lagged_ar, 3) 
	size = array.size(lagged_ar) - 1 
	if size == 3 
		[triple_arima, triple_arima_er, triple_arima_cor, triple_arima_r2, trip_b1, trip_b2, trip_b3, trip_b0] = spts.f_triple_regression(src, src[1], src[2], src[3], trend_len) 
		result := triple_arima 
		cor := triple_arima_cor 
		r2 := triple_arima_r2  
		err := triple_arima_er 
		b1 := trip_b1 
		b2 := trip_b2 
		b3 := trip_b3
		b0 := trip_b0 

	else if size == 2 
		[mult_result, mult_cor, mult_r2, mult_er, mult_b1, mult_b2, mult_b0] = spts.f_multiple_regression(src, src[1], src[2], src[1], src[2], trend_len) 
		result := mult_result 
		cor := mult_cor  
		r2 := mult_r2  
		err := mult_er 
		b1 := mult_b1 
		b2 := mult_b2
		b0 := mult_b0 

	else if size == 1 
		[single_result, single_r, single_r2, single_er, single_b1, single_b0] = spts.f_linear_regression(src, src[1], trend_len) 
		result := single_result 
		cor := single_r 
		r2 := single_r2  
		err := single_er 
		b1 := single_b1
		b0 := single_b0 
	else 
		[single_result, single_r, single_r2, single_er, single_b1, single_b0] = spts.f_linear_regression(src, src[1], trend_len) 
		result := single_result 
		cor := single_r 
		r2 := single_r2  
		err := single_er 
		b1 := single_b1
		b0 := single_b0 
	// Define Export variables 
	arima_result = result 
	arima_ucl = result + err 
	arima_lcl = result - err 
	arima_cor = cor 
	arima_r2 = r2 
	arima_err = err 
	y1 = b1 
	y0 = b0 
	float y2 = 0.0 
	float y3 = 0.0
	if b2 > 0 or b2 < -0 
		y2 := b2 
	if b3 > 0 or b2 < -0 
		y3 := b3 
	arima_len = trend_len 
	[arima_result, arima_ucl, arima_lcl, arima_cor, arima_r2, arima_err, y1, y2, y3, y0]


//About Machine Learning Regression 
// This function is designed to provide a method of autofitting a multiple regression muodel. The user can select up to 5 potential independent variables and the 
// function will sort through each variable, select the ones with the highest correlation and build a regression based model. 
// Has the capability of performing regression on up to 3 independent variables. 

// @function: Creates an automatic regression based forecast model (can be used for other regression operations) from a list of possible independent variables.
// @param x output (desired returned float), x1 to x5 (potential independent variables) 
// @returns: result, upper bound levels, lower bound levels, optional statitics table that displays the model parameters and statistics 
export machine_learning_regression(float output, float x1, float x2, float x3, float x4, float x5, bool show_statistics) => 
	src = output
	cor1 = ta.correlation(time, src, 50),	cor2 = ta.correlation(time, src, 100),		cor3 = ta.correlation(time,src, 150),		cor4 = ta.correlation(time, src, 200), 		cor5 = ta.correlation(time, src, 250) 
	cor6 = ta.correlation(time, src, 300), 	cor7 = ta.correlation(time, src, 350), 		cor8 = ta.correlation(time, src, 400),		cor9 = ta.correlation(time, src, 450),		cor10 = ta.correlation(time,src, 500), 
	cor11 = ta.correlation(time, src, 550),	cor12 = ta.correlation(time,src, 600),		cor13 = ta.correlation(time, src, 650),		cor14 = ta.correlation(time, src, 700),		cor15 = ta.correlation(time, src, 750), 
	cor16 = ta.correlation(time, src, 800),	cor17 = ta.correlation(time, src, 850) 

	max_cor = math.max(cor1, cor2, cor3, cor4, cor5, cor6, cor7, cor8, cor9, cor10, cor11, cor12, cor13, cor14, cor15, cor16, cor17) 
	int trend_len = max_cor == cor1 ? 50 : max_cor == cor2 ? 100 : max_cor == cor3 ? 150 : max_cor == cor4 ? 200 : max_cor == cor5 ? 250 : max_cor == cor6 ? 300 : max_cor == cor7 ? 350 : max_cor == cor8 ? 400 : max_cor == cor9 ? 450 : max_cor == cor10 ? 500 : max_cor == cor11 ? 550 : max_cor == cor12 ? 600 : max_cor == cor13 ? 650 : max_cor == cor14 ? 650 : max_cor == cor15 ? 700 : max_cor == cor16 ? 750 : max_cor == cor17 ? 800 : 150 
	// Find Strongest Relationship 
	autocor1 = math.abs(ta.correlation(output, x1[1], trend_len)),	autocor2 = math.abs(ta.correlation(output, x2[1], trend_len)),	autocor3 = math.abs(ta.correlation(output, x3[1], trend_len))
	autocor4 = math.abs(ta.correlation(output, x4[1], trend_len)), 	autocor5 = math.abs(ta.correlation(output, x5[1], trend_len)), autocor6 = math.abs(ta.correlation(output, output[1], trend_len))
	best_fit = math.max(autocor1, autocor2, autocor3, autocor4, autocor5, autocor6) 
	select_best_fit = best_fit == autocor1 ? x1 : best_fit == autocor2 ? x2 : best_fit == autocor3 ? x3 : best_fit == autocor4 ? x4 : best_fit == autocor5 ? x5 : best_fit == autocor6 ? output[1] : output[1]
    first_order = array.from(autocor1, autocor2, autocor3, autocor4, autocor5, autocor6) 
    first_order_string = array.from("X1", "X2", "X3", "X4", "X5", "Output") 
    second_order = array.new<float>() 
    second_order_string = array.new<string>() 
    for i = 0 to array.size(first_order) - 1 
        if array.get(first_order, i) >= 0.95
            array.push(second_order_string, array.get(first_order_string, i))
    string i1 = na 
    string i2 = na 
    string i3 = na 
    if array.size(second_order_string) > 2 
        i1 := array.get(second_order_string, 0) 
        i2  := array.get(second_order_string, 1) 
        i3 := array.get(second_order_string, 2) 
    else if array.size(second_order_string) >1 
        i1 := array.get(second_order_string, 0) 
        i2 := array.get(second_order_string, 1) 
    else if array.size(second_order_string) > 0 
        i1 := array.get(second_order_string, 0)        
	
	float x1_input = i1 == "X1" ? x1 : i1 == "X2" ? x2 : i1 == "X3" ? x3 : i1 == "X4" ? x4 : i1 == "X5" ? x5 : i1 == "Output" ? output[1] : output[1]
	float x2_input = i2 == "X1" ? x1 : i2 == "X2" ? x2 : i2 == "X3" ? x3 : i2 == "X4" ? x4 : i2 == "X5" ? x5 : i2 == "Output" ? output[1] : na
	float x3_input = i3 == "X1" ? x1 : i3 == "X2" ? x2 : i3 == "X3" ? x3 : i3 == "X4" ? x4 : i3 == "X5" ? x5 : i3 == "Output" ? output[1] : na
    float x1_cor =  i1 == "X1" ? autocor1 : i1 == "X2" ? autocor2 : i1 == "X3" ? autocor3 : i1 == "X4" ? autocor4: i1 == "X5" ? autocor5 : i1 == "Output" ? autocor6: na
    float x2_cor =  i2 == "X1" ? autocor1 : i2 == "X2" ? autocor2 : i2 == "X3" ? autocor3 : i2 == "X4" ? autocor4: i2 == "X5" ? autocor5 : i2 == "Output" ? autocor6: na
    float x3_cor =  i3 == "X1" ? autocor1 : i3 == "X2" ? autocor2 : i3 == "X3" ? autocor3 : i3 == "X4" ? autocor4: i3 == "X5" ? autocor5 : i3 == "Output" ? autocor6: na
	float result = 0.0 
	float error = 0.0 
	float r = 0.0 
	float r2 = 0.0 
	float b1 = 0.0 
	float b2 = 0.0 
	float b3 = 0.0 
	float b0 = 0.0 
    float ucl = 0.0 
    float lcl = 0.0 
	if x3_input > 0 
		[three_result, three_se, three_r, three_r2, three_b1, three_b2, three_b3, three_b0] = spts.f_triple_regression(output, x1_input, x2_input, x3_input, trend_len)
		result := three_result,		error := three_se,		r := three_r,		r2 := three_r2,		b1 := three_b1,		b2 := three_b2,		b3 := three_b3, 	b0 := three_b0 
	
	if x2_input > 0 
		[two_result, two_r, two_r2, two_error, two_b1, two_b2, two_b0] = spts.f_multiple_regression(output, x1_input, x2_input, x1_input, x2_input, trend_len)
		result := two_result,		r := two_r,		r2 := two_r2,		error := two_error,		b1 := two_b1,		b2 := two_b2,		b0 := two_b0 

	if x1 > 0 
		[one_result, one_r, one_r2, one_error, one_b1, one_b0] = spts.f_linear_regression(output, x1_input, trend_len)
        result := one_result,   r := one_r,     r2 :=one_r2,     error := one_error,    b1 := one_b1,   b0 := one_b0, ucl := one_result + one_error, lcl := one_result - one_error

	if show_statistics
		var table stats = table.new(position.middle_right, 5, 10, bgcolor = color.black, frame_color = color.white, frame_width = 3, border_color = color.white, border_width = 2) 
		table.cell(stats, 1, 1, text = "Included Variables", bgcolor = color.gray, text_color = color.white)
		table.cell(stats, 1, 2, text = "Independent Variable #1: " + str.tostring(i1) + "\n Coefficient: " + str.tostring(math.round(b1,4)) + "\n Correlation: " + str.tostring(math.round(x1_cor,2)), text_color = color.white)
		if x2_input > 0 
			table.cell(stats, 1, 3, text = "Independent Variable #2: " + str.tostring(i2) + "\n Coefficient: " + str.tostring(math.round(b2,4)) + "\n Correlation: " + str.tostring(math.round(x2_cor,2)), text_color = color.white)
		if x3_input > 0 
			table.cell(stats, 1, 4, text = "Independent Variable #3: " + str.tostring(i3) + " \n  Coefficient: " + str.tostring(math.round(b3,4)) + "\n Correlation: " + str.tostring(math.round(x3_cor,2)), text_color = color.white)
        table.cell(stats, 1, 5, text = "Intercept: " + str.tostring(math.round(b0, 3)), text_color = color.white)
        table.cell(stats, 1, 6, text = "Model Statistics", bgcolor = color.gray, text_color = color.white)
        if x3_input > 0
            table.cell(stats, 1, 7, text = "Model Equation: \n" + "y = " + str.tostring(math.round(b1,3)) + str.tostring(i1) + " + " +  str.tostring(math.round(b2,3)) +  str.tostring(i2) + " + " + str.tostring(math.round(b3,3)) + str.tostring(i3) + " + " + str.tostring(math.round(b0,3)) , text_color = color.white)
        if x2_input > 0 and x3_input <= 0 
            table.cell(stats, 1, 7, text = "Model Equation: \n" + "y = " + str.tostring(math.round(b1,3)) + str.tostring(i1) + " + " +  str.tostring(math.round(b2,3)) +  str.tostring(i2) + " + " + str.tostring(math.round(b0,3)) , text_color = color.white)
        if x1_input > 0 and x2_input <= 0 
            table.cell(stats, 1, 7, text = "Model Equation: \n" + "y = " + str.tostring(math.round(b1,3)) + str.tostring(i1) + " + " + str.tostring(math.round(b0,3)) , text_color = color.white)
        table.cell(stats, 1, 8, text = "R: " + str.tostring(math.round(r,2)) + "\n R2: " + str.tostring(math.round(r2,2)) + "\n Error of Residuals: " + str.tostring(math.round(error, 2)) + "\n Lookback Length: " + str.tostring(trend_len), text_color = color.white) 
    [result, ucl, lcl]


// @function: Creates a simple linear regression time series channel 
// @param x float source, forecasting legnth, standard deviation extension 1 and 2
// @returns: Linreg Channel 
export time_series_linear_forecast(float src, int forecast_length, float standard_deviation_extension_1, float standard_deviation_extension_2) => 
	cor1 = ta.correlation(time, src, 50),	cor2 = ta.correlation(time, src, 100),		cor3 = ta.correlation(time,src, 150),		cor4 = ta.correlation(time, src, 200), 		cor5 = ta.correlation(time, src, 250) 
	cor6 = ta.correlation(time, src, 300), 	cor7 = ta.correlation(time, src, 350), 		cor8 = ta.correlation(time, src, 400),		cor9 = ta.correlation(time, src, 450),		cor10 = ta.correlation(time,src, 500), 
	cor11 = ta.correlation(time, src, 550),	cor12 = ta.correlation(time,src, 600),		cor13 = ta.correlation(time, src, 650),		cor14 = ta.correlation(time, src, 700),		cor15 = ta.correlation(time, src, 750), 
	cor16 = ta.correlation(time, src, 800),	cor17 = ta.correlation(time, src, 850) 

	max_cor = math.max(cor1, cor2, cor3, cor4, cor5, cor6, cor7, cor8, cor9, cor10, cor11, cor12, cor13, cor14, cor15, cor16, cor17) 
	int trend_len = max_cor == cor1 ? 50 : max_cor == cor2 ? 100 : max_cor == cor3 ? 150 : max_cor == cor4 ? 200 : max_cor == cor5 ? 250 : max_cor == cor6 ? 300 : max_cor == cor7 ? 350 : max_cor == cor8 ? 400 : max_cor == cor9 ? 450 : max_cor == cor10 ? 500 : max_cor == cor11 ? 550 : max_cor == cor12 ? 600 : max_cor == cor13 ? 650 : max_cor == cor14 ? 650 : max_cor == cor15 ? 700 : max_cor == cor16 ? 750 : max_cor == cor17 ? 800 : 150 

	[result, r, r2, error, b1, b0] = spts.f_linear_regression(src, time, trend_len) 

	var line result_line = na 
	var line ucl_er = na 
	var line ucl_sd1 = na
	var line ucl_sd2 = na 
	var line lcl_er = na 
	var line lcl_sd1 = na 
	var line lcl_sd2 = na 
	start = (b1 * (time + (timeframe.in_seconds() * 1000 * 1)) + b0)
	end = (b1 * (time + (timeframe.in_seconds() * 1000 * forecast_length)) + b0)
	if barstate.islast
		result_line.delete(), ucl_er.delete(), ucl_sd1.delete(), ucl_sd2.delete(), lcl_er.delete(), lcl_sd1.delete(), lcl_sd2.delete() 
		result_line := line.new(bar_index, y1 = start, x2 = bar_index + forecast_length, y2 = end, color = color.blue, width =3)
		ucl_er := line.new(bar_index, y1 = start + error, x2 = bar_index + forecast_length, y2 = end + error, color = color.blue, width =3)
		ucl_sd1 := line.new(bar_index, y1 = start + (error * standard_deviation_extension_1), x2 = bar_index + forecast_length, y2 = end + (error * standard_deviation_extension_1), color = color.lime, width =3)
		ucl_sd2 := line.new(bar_index, y1 = start + (error * standard_deviation_extension_2), x2 = bar_index + forecast_length, y2 = end + (error * standard_deviation_extension_2), color = color.white, width =3)
		lcl_sd1 := line.new(bar_index, y1 = start - (error * standard_deviation_extension_1), x2 = bar_index + forecast_length, y2 = end - (error * standard_deviation_extension_1), color = color.red, width =3)
		lcl_sd2 := line.new(bar_index, y1 = start - (error * standard_deviation_extension_2), x2 = bar_index + forecast_length, y2 = end  - (error * standard_deviation_extension_2), color = color.white, width =3)
		lcl_er := line.new(bar_index, y1 = start - error, x2 = bar_index + forecast_length, y2 = end - error, color = color.blue, width =3)

// @function: Creates a simple quadratic regression time series channel 
// @param x float source, forecasting legnth
// @returns: Quadratic Regression Channel
export quadratic_time_series_forecast(float src, int forecast_length) =>
	cor1 = ta.correlation(time, src, 50),	cor2 = ta.correlation(time, src, 100),		cor3 = ta.correlation(time,src, 150),		cor4 = ta.correlation(time, src, 200), 		cor5 = ta.correlation(time, src, 250) 
	cor6 = ta.correlation(time, src, 300), 	cor7 = ta.correlation(time, src, 350), 		cor8 = ta.correlation(time, src, 400),		cor9 = ta.correlation(time, src, 450),		cor10 = ta.correlation(time,src, 500), 
	cor11 = ta.correlation(time, src, 550),	cor12 = ta.correlation(time,src, 600),		cor13 = ta.correlation(time, src, 650),		cor14 = ta.correlation(time, src, 700),		cor15 = ta.correlation(time, src, 750), 
	cor16 = ta.correlation(time, src, 800),	cor17 = ta.correlation(time, src, 850) 

	max_cor = math.max(cor1, cor2, cor3, cor4, cor5, cor6, cor7, cor8, cor9, cor10, cor11, cor12, cor13, cor14, cor15, cor16, cor17) 
	int trend_len = max_cor == cor1 ? 50 : max_cor == cor2 ? 100 : max_cor == cor3 ? 150 : max_cor == cor4 ? 200 : max_cor == cor5 ? 250 : max_cor == cor6 ? 300 : max_cor == cor7 ? 350 : max_cor == cor8 ? 400 : max_cor == cor9 ? 450 : max_cor == cor10 ? 500 : max_cor == cor11 ? 550 : max_cor == cor12 ? 600 : max_cor == cor13 ? 650 : max_cor == cor14 ? 650 : max_cor == cor15 ? 700 : max_cor == cor16 ? 750 : max_cor == cor17 ? 800 : 150 
	timesq = math.pow(time, 2) 
	[result, pear_cor, rsqrd, std_err, b1, b2, b0] = spts.f_multiple_regression(src, time, timesq, time, timesq, trend_len) 
	start = (b1 * (time + (timeframe.in_seconds() * 1000 * 1)) + (b2 * math.pow(time + (timeframe.in_seconds() * 1000 * 1), 2)) + b0)
	end = (b1 * (time + (timeframe.in_seconds() * 1000 * 1)) + (b2 * math.pow(time + (timeframe.in_seconds() * 1000 * forecast_length), 2)) + b0)

	halved = forecast_length / 2 
	mid = (b1 * (time + (timeframe.in_seconds() * 1000 * 1)) + (b2 * math.pow(time + (timeframe.in_seconds() * 1000 * halved), 2)) + b0)
	int havled_round = math.round(halved) 
	var polyline quad = na 
    var polyline quadup = na 
    var polyline quaddown = na 

	var px1 = 0,	var py1 = 0.0,      var pxu1 = 0,   var pyu1 = 0.0,     var pxl1 = 0,   var pyl1 = 0.0  
	var px2 = 0,	var py2 = 0.0,      var pxu2 = 0,   var pyu2 = 0.0,     var pxl2 = 0,   var pyl2 = 0.0 
	var px3 = 0,	var py3 = 0.0,      var pxu3 = 0,   var pyu3 = 0.0,     var pxl3 = 0,   var pyl3 = 0.0 

	if barstate.islast 
		px1 := bar_index + 1 
		py1 := start 
		px2 := bar_index + havled_round
		py2 := mid 
		px3 := bar_index + forecast_length
		py3 := end 
        pxu1 := bar_index + 1 
        pyu1 := start + std_err 
        pxu2 := bar_index + havled_round
        pyu2 := mid + std_err 
        pxu3 := bar_index + forecast_length 
        pyu3 := end + std_err 
        pxl1 := bar_index + 1 
        pyl1 := start - std_err 
        pxl2 := bar_index + havled_round
        pyl2 := mid - std_err 
        pxl3 := bar_index + forecast_length 
        pyl3 := end - std_err 
	
	point1 = chart.point.from_index(px1, py1),      point1u = chart.point.from_index(pxu1, pyu1),       point1l = chart.point.from_index(pxl1, pyl1)
	point2 = chart.point.from_index(px2, py2),      point2u = chart.point.from_index(pxu2, pyu2),       point2l = chart.point.from_index(pxl2, pyl2)
	point3 = chart.point.from_index(px3, py3),      point3u = chart.point.from_index(pxu3, pyu3),       point3l = chart.point.from_index(pxl3, pyl3)

	if barstate.islast 
		var cpa = array.new<chart.point>() 
        var up = array.new<chart.point>() 
        var lo = array.new<chart.point>() 
		array.clear(cpa) 
        array.clear(up)
        array.clear(lo) 
		polyline.delete(quad) 
        polyline.delete(quadup)
        polyline.delete(quaddown) 
		array.push(cpa, point1) 
		array.push(cpa, point2) 
		array.push(cpa, point3) 
        array.push(up, point1u) 
        array.push(up, point2u) 
        array.push(up, point3u) 
        array.push(lo, point1l) 
        array.push(lo, point2l) 
        array.push(lo, point3l)
		quad := polyline.new(cpa, curved = true, line_color = color.blue, line_width = 3) 
        quadup := polyline.new(up, curved = true, line_color = color.green, line_width = 3) 
        quaddown := polyline.new(lo, curved = true, line_color = color.red, line_width = 3) 


// @function: Creates an ARIMA style moving average forecaster 
// @param x source, train time, moving average length, forecasting length, and 3 arrays: forecast results, upper bound results and lower bound results 
// @returns: forecast_result, upper_bound_result, lower_bound_result, moving_average, ucl, lcl
export moving_average_forecaster(float source, int train_time, int ma_length, int forecast_length, float[] forecast_result, float[] upper_bound_result, float[] lower_bound_result) => 
    ma = ta.sma(source, ma_length) 
    // Find Error
    bool above_ma = source > ma 
    bool below_ma = source < ma 
    above_ar = array.new<float>() 
    below_ar = array.new<float>() 
    above_dif = source - ma 
    below_dif = ma - source
    auto_ar = array.new<float>() 
    auto_dif = ma - ma[1]  
    for i = 0 to train_time 
        array.push(auto_ar, auto_dif[i])
        if above_ma[i] 
            array.push(above_ar, above_dif[i])
        else if below_ma[i] 
            array.push(below_ar, below_dif[i]) 
        else 
            na 

    above_avg = array.avg(above_ar) 
    below_avg = array.avg(below_ar) 
    auto_avg = array.avg(auto_ar) 
    // Forecast 
    float ma_result = ma 
    float ma_ucl = ma + above_avg 
    float ma_lcl = ma - below_avg 
    for i = 0 to forecast_length
        array.push(forecast_result, ma_result + (auto_avg / 2)) 
        array.push(upper_bound_result, ma_ucl + above_avg) 
        array.push(lower_bound_result, ma_lcl- (below_avg / 2)) 
        ma_result := ma_result + auto_avg 
        ma_ucl := ma_ucl + above_avg 
        ma_lcl := ma_lcl - above_avg 
    moving_average = ma[1] + auto_avg
    ucl = moving_average + above_avg 
    lcl = moving_average - below_avg 
    [forecast_result, upper_bound_result, lower_bound_result, moving_average, ucl, lcl]

// @function: Creates a Z-Score Forecast and is capable of plotting the immediate forecast via a Polyline 
// @param x  Z-Score Length, Z-Score Source, Boolean for whether you want alerts plotted, forecast length and whether you want the forecast results to be plotted 
// @returns: The export is void, it will export the Polyline forecast and the Z-forecast table if you enable it. 
export zscore_forecast(int z_length, float z_source, bool show_alerts, int forecast_length, bool show_forecast_table) => 
    z = spts.f_zscore(z_source, z_length) 

    // Determine highest and lowest Z 
    highest_z = ta.highest(z, z_length) 
    lowest_z = ta.lowest(z, z_length) 

    // Determine trend direction
    trend_direct = ta.correlation(time, z_source, z_length) 

    uptrend = trend_direct >= 0 
    downtrend = trend_direct <= -0 

    // Uptrend Forecast 
    float up_point_1 = 0.0 
    float up_point_2 = 0.0 
    float up_point_3 = 0.0 
    float up_point_4 = 0.0 
    float up_point_5 = 0.0
    float down_point_1 = 0.0 
    float down_point_2 = 0.0 
    float down_point_3 = 0.0 
    float down_point_4 = 0.0 
    float down_point_5 = 0.0 
    if uptrend and z < highest_z  
        up_point_1 := z + 0.5 
        if up_point_1 < highest_z 
            up_point_2 := up_point_1 + 0.5 
            if up_point_2 < highest_z 
                up_point_3 := up_point_2 + 0.5
                if up_point_3 < highest_z 
                    up_point_4 := up_point_3 + 0.5 
                    if up_point_4 < highest_z 
                        up_point_5 := up_point_4 + 0.5 
    else if uptrend and z >= highest_z or downtrend and z > lowest_z 
        down_point_1 := z - 0.5 
        if down_point_1 > lowest_z 
            down_point_2 := down_point_1 - 0.5 
            if down_point_2 > lowest_z 
                down_point_3 := down_point_2 - 0.5 
                if down_point_3 > lowest_z 
                    down_point_4 := down_point_3 - 0.5 
                    if down_point_4 > lowest_z 
                        down_point_5 := down_point_4 - 0.5 

    // Convert Z to Price 
    avg = ta.sma(z_source, z_length)
    sd = ta.stdev(z_source, z_length)
    up_1 = avg + (up_point_1 * sd) 
    up_2 = avg + (up_point_2 * sd) 
    up_3 = avg + (up_point_3 * sd) 
    up_4 = avg + (up_point_4 * sd) 
    up_5 = avg + (up_point_5 * sd) 
    down_1 = avg + (down_point_1 * sd) 
    down_2 = avg + (down_point_2 * sd) 
    down_3 = avg + (down_point_3 * sd) 
    down_4 = avg + (down_point_4 * sd) 
    down_5 = avg + (down_point_5 * sd) 

    // Define Forecast Line 
    var polyline uptrend_plot = na 
    var polyline downtrend_plot = na 
    
    var ux1 = 0,    var uy1 = 0.0 
    var ux2 = 0,    var uy2 = 0.0 
    var ux3 = 0,    var uy3 = 0.0
    var ux4 = 0,    var uy4 = 0.0 
    var ux5 = 0,    var uy5 = 0.0 
    var dx1 = 0,    var dy1 = 0.0
    var dx2 = 0,    var dy2 = 0.0
    var dx3 = 0,    var dy3 = 0.0 
    var dx4 = 0,    var dy4 = 0.0
    var dx5 = 0,    var dy5 = 0.0 
    int uppoint_num = 0 
    int downpoint_num = 0 
    if barstate.islast 
        uppoint_num := 0 
        downpoint_num := 0 
        if uptrend and z < highest_z 
            if up_1 > 0 
                ux1 := bar_index 
                uy1 := up_1
                uppoint_num += 1 
            if up_2 > 0 
                ux2 := bar_index + 5
                uy2 := up_2 
                uppoint_num += 1 
            if up_3 > 0 
                ux3 := bar_index + 10 
                uy3 := up_3 
                uppoint_num += 1 
            if up_4 > 0 
                ux4 := bar_index + 15 
                uy4 := up_4 
                uppoint_num += 1 
            if up_5 > 0 
                ux5 := bar_index + 20 
                uy5 := up_5 
                uppoint_num += 1 
        else if  downtrend and z > lowest_z 
            if down_1 > 0 
                dx1 := bar_index 
                dy1 := down_1
                downpoint_num += 1 
            if down_2 > 0 
                dx2 := bar_index + 5
                dy2 := down_2 
                downpoint_num += 1 
            if down_3 > 0 
                dx3 := bar_index + 10 
                dy3 := down_3 
                downpoint_num += 1 
            if down_4 > 0 
                dx4 := bar_index + 15 
                dy4 := down_4 
                downpoint_num += 1 
            if down_5 > 0 
                dx5 := bar_index + 20 
                dy5 := down_5
                downpoint_num += 1 
    upoint1 = chart.point.from_index(ux1, uy1) 
    upoint2 = chart.point.from_index(ux2, uy2) 
    upoint3 = chart.point.from_index(ux3, uy3)
    upoint4 = chart.point.from_index(ux4, uy4)
    upoint5 = chart.point.from_index(ux5, uy5)  
    dpoint1 = chart.point.from_index(dx1, dy1) 
    dpoint2 = chart.point.from_index(dx2, dy2) 
    dpoint3 = chart.point.from_index(dx3, dy3)
    dpoint4 = chart.point.from_index(dx4, dy4)
    dpoint5 = chart.point.from_index(dx5, dy5)  
    if barstate.islast 
        var up_ar = array.new<chart.point>() 
        var down_ar = array.new<chart.point>() 
        array.clear(up_ar) 
        array.clear(down_ar) 
        uptrend_plot.delete() 
        downtrend_plot.delete() 
        if uppoint_num > 0 
            up_ar.push(upoint1) 
        if uppoint_num > 1 
            up_ar.push(upoint2) 
        if uppoint_num > 2 
            up_ar.push(upoint3) 
        if uppoint_num > 3 
            up_ar.push(upoint4) 
        if uppoint_num > 4
            up_ar.push(upoint5) 
        if downpoint_num > 0
            down_ar.push(dpoint1) 
        if downpoint_num > 1
            down_ar.push(dpoint2) 
        if downpoint_num > 2
            down_ar.push(dpoint3) 
        if downpoint_num > 3
            down_ar.push(dpoint4) 
        if downpoint_num > 4
            down_ar.push(dpoint5) 
        uptrend_plot := polyline.new(up_ar, true, line_color = color.lime, line_width = 3) 
        downtrend_plot := polyline.new(down_ar, true, line_color = color.red, line_width=3) 
    if show_alerts
        var int z_hi_wait = 0 
        var int z_lo_wait = 0 
        if z >= highest_z 
            z_hi_wait += 1 
            if z_hi_wait >= 5 
                label.new(bar_index, high, text = "Z-Score at Highest \n" + str.tostring(math.round(z,2)), color = color.red, textcolor = color.white)
                z_hi_wait := 0 
        if z <= lowest_z 
            z_lo_wait += 1 
            if z_lo_wait >= 5 
                label.new(bar_index, low, text = "Z-Score at Lowest \n" + str.tostring(math.round(z, 2)), color = color.lime, textcolor = color.white)
                z_lo_wait := 0 
    if show_forecast_table
        var table fortable = table.new(position.middle_right, 5, forecast_length + 3, bgcolor = color.black, frame_color = color.white, frame_width = 3) 
        up_forecast_arr = array.new<float>() 
        down_forecast_arr = array.new<float>() 
        zup = array.new<float>() 
        zdown = array.new<float>() 
        for i = 0 to forecast_length 
            array.push(up_forecast_arr, avg + ((z + (i / 2)) * sd)) 
            array.push(down_forecast_arr, avg + ((z - (i/2)) * sd))
            array.push(zup, z + (i / 2)) 
            array.push(zdown, z - (i / 2)) 
        for i = 0 to array.size(zup) - 1 
            table.cell(fortable, 1, 1, text = "Uptrend \n Z-Score", text_color = color.lime)
            table.cell(fortable, 2, 1, text = "Uptrend \n Price Forecast", text_color = color.lime)
            table.cell(fortable, 3, 1, text = "Downtrend \n Z-Score", text_color = color.red)
            table.cell(fortable, 4, 1, text = "Downtrend \n Price Forecast", text_color = color.red)

            table.cell(fortable, 1, 2 + i, text = str.tostring(math.round(array.get(zup, i),2)), text_color = color.lime)
            table.cell(fortable, 2, 2 + i, text = str.tostring(math.round(array.get(up_forecast_arr, i),2)), text_color = color.lime)
            table.cell(fortable, 3, 2 + i, text = str.tostring(math.round(array.get(zdown, i),2)), text_color = color.red)
            table.cell(fortable, 4, 2 + i, text = str.tostring(math.round(array.get(down_forecast_arr, i),2)), text_color = color.red)