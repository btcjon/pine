//@version=5
indicator("TTB Jurik MA", "TTB JMA", overlay=true, format=format.price, precision=4, timeframe="", timeframe_gaps=true)

// Inputs //
src = input(close, title="Source", inline="1")
Length = input.int(title="Length", defval=7)
Phase = input.int(title="Phase", defval=50)
// User input timeframes
jma2tf = input.timeframe("60", "Timeframe for JMA2")
jma3tf = input.timeframe("120", "Timeframe for JMA3")
showJMA2 = input.bool(true, title="Show JMA2")
showJMA3 = input.bool(true, title="Show JMA3")
//code from library
jmapow(src, len) =>
    upperBand = src
    lowerBand = src
    
    // Volatility
    del1 = src - nz(upperBand[1], src)
    del2 = src - nz(lowerBand[1], src)
    volty = math.abs(del1) == math.abs(del2) ? 0 : math.max(math.abs(del1), math.abs(del2))
    
    // Incremental sum of Volty
    vSum = 0.0
    vSum := nz(vSum[1]) + 0.1 * (volty - nz(volty[10], volty))

    // Jurik used 65
    avgLen = 65
    avgVolty = ta.sma(vSum, avgLen)
    
    // Relative price volatility
    alen = (len - 1) / 2
    len1 = math.max(math.log(math.sqrt(alen)) / math.log(2) + 2, 0)
    pow1 = math.max(len1 - 2, 0.5)
    
    rVolty = avgVolty != 0 ? volty / avgVolty : 0
    if (rVolty > math.pow(len1, 1 / pow1))
        rVolty := math.pow(len1, 1 / pow1)
    if rVolty < 1
        rVolty := 1
    
    // Jurik Bands
    pow2 = math.pow(rVolty, pow1)
    len2 = math.sqrt(alen) * len1
    bet  = len2/(len2 + 1)
    kv   = math.pow(bet, math.sqrt(pow2))
    
    upperBand := del1 > 0 ? src : src - kv * del1
    lowerBand := del2 < 0 ? src : src - kv * del2

    pow2

// @function Jurik MA
// @param src Series to use
// @param len Filtering length
// @param phase JMA Phase
// @returns Filtered series
jma(float src, int len, int phase = 50) =>
    jma = 0.0
    phaseRatio = phase < -100 ? 0.5 : phase > 100 ? 2.5 : phase / 100 + 1.5
    beta = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
    power = jmapow(src, len)
    alpha = math.pow(beta, power)
    
    // 1st stage - preliminary smoothing by adaptive EMA
    ma1 = 0.0
    ma1 := (1 - alpha) * src + alpha * nz(ma1[1])
    
    // 2nd stage - preliminary smoothing by Kalman filter
    det0 = 0.0
    det0 := (1 - beta) * (src - ma1) + beta * nz(det0[1])
    ma2 = ma1 + phaseRatio * det0
    
    // 3rd stage - final smoothing by Jurik adaptive filter
    det1 = 0.0
    det1 := math.pow(1 - alpha, 2) * (ma2 - nz(jma[1])) + math.pow(alpha, 2) * nz(det1[1])

    jma := nz(jma[1]) + det1
    jma

float out = jma(src, Length, Phase)
// Fetching data from user selected timeframes
jma2 = request.security(syminfo.tickerid, jma2tf, jma(src, Length, Phase))
jma3 = request.security(syminfo.tickerid, jma3tf, jma(src, Length, Phase))
// Plotting
//plot(out, "JMA", color=color.rgb(163, 163, 163), linewidth=2)
//plot(showJMA2 ? jma2 : na, "JMA2", color=color.rgb(36, 252, 241), linewidth=2)
//plot(showJMA3 ? jma3 : na, "JMA3", color=color.rgb(215, 73, 254), linewidth=2)

plotColor = out > out[1] ? color.green : color.red
plot(out, "JMA", color=plotColor, linewidth=2)

plotColor2 = na(jma2) or jma2 > jma2[1] ? color.green : color.red
plot(showJMA2 ? jma2 : na, "JMA2", color=plotColor2, linewidth=2)

plotColor3 = na(jma3) or jma3 > jma3[1] ? color.green : color.red
plot(showJMA3 ? jma3 : na, "JMA3", color=plotColor3, linewidth=2)