//@version=5

strategy('TTB DCA 7.0L', overlay=true, pyramiding=999, calc_on_every_tick=false, default_qty_type=strategy.cash, default_qty_value=1, initial_capital=100000, commission_value=0.00, slippage=0, max_bars_back=4900)

import thetradingbot/ttbcolors/1 as TTBColors

source_type = input.string('Close', 'Source', options=['Close', 'Open', 'High', 'Low', 'HL2', 'HLC3', 'OHLC4', 'Median Body', 'Weighted Close', 'Trend Biased', 'Trend Biased Extreme'])
direction = input.string(defval='Long', title='Trading Direction', options=['All', 'Long', 'Short'])


source_function(type) =>
    if type == 'Close'
        close
    else if type == 'Open'
        open
    else if type == 'High'
        high
    else if type == 'Low'
        low
    else if type == 'HL2'
        hl2
    else if type == 'HL3'
        hlc3
    else if type == 'OHLC4'
        ohlc4
    else if type == 'Median Body'
        (open + close) / 2
    else if type == 'Weighted Close'
        (high + low + 2 * close) / 4
    else if type == 'Trend Biased'
        close > open ? (high + close) / 2 : (low + close) / 2
    else if type == 'Trend Biased Extreme'
        close > open ? high : low

truncate(number, decimals) =>
    factor = math.pow(10, decimals)
    int(number * factor) / factor

var long = false
var short = true

if direction == 'All'
    long := true
    short := true
    short
else if direction == 'Long'
    long := true
    short := false
    short
else if direction == 'Short'
    long := false
    short := true
    short

// Strategy Inputs
ID = input(defval='6700960415957', title='ID')
version = input(defval='7-0', title='version')
tf = input(defval='30', title='tf')
safe_order_step_scale_Multiplier = input(1.3, title="Safe Order Step Scale Multiplier")
groupTitleLongInputs = "Long Inputs"
price_deviation = input.float(0.03, title='Price deviation to open safety orders (%)', step=0.1, minval=0.0) / 100
take_profit = input.float(0.08, title='Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_order = input.float(10000, "Base Order Size")
safe_order = input.float(10000, "Safe Order Size")
safe_order_volume_scale = input.float(1, step=0.1, title='Safety order volume scale')
safe_order_step_scale = input.float(1.5, step=0.1, title='Safety order step scale')
max_safe_order = input(5, title='max no. of safe orders')
groupTitleShortInputs = "Short Inputs"
price_S_deviation = input.float(0.03, title='Price deviation to open short safety orders (%)', step=0.1, minval=0.0) / 100
take_S_profit = input.float(0.08, title='Short Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_S_order = input.float(10000, title='base sell order')
safe_S_order = input.float(10000, title='safe sell order')
safe_S_order_volume_scale = input.float(1, step=0.1, title='Safety sell order volume scale')
safe_S_order_step_scale = input.float(1.5, step=0.1, title='Safety sell order step scale')
max_S_safe_order = input(5, title='max no. of sell safe orders')





//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// rmi trend


// ** ---> Inputs ------------- {
showRMIplots = input.bool(false, "Show RMI Plots")
var bool rmi_positive               = false
var bool rmi_negative               = false
string rmi_RSI_group                = "RMI Settings"
string rmi_mom_group                = "Range Vales"
string rmi_visual                   = "Visuals" 
rmi_Length = 14
rmi_pmom = 66 //positive above
rmi_nmom = 30 //negative below
bool rmi_filleshow = true
color rmi_bull = color.new(color.rgb(0, 188, 212), 70) // 70% transparency
color rmi_bear = color.new(color.rgb(255, 82, 82), 70) // 70% transparency
float rmi_BarRange                  = high - low

rmi_up = ta.rma(math.max(ta.change(close), 0), rmi_Length)
rmi_down = ta.rma(-math.min(ta.change(close), 0), rmi_Length)
rmi_rsi = rmi_down == 0 ? 100 : rmi_up == 0 ? 0 : 100 - (100 / (1 + rmi_up / rmi_down))
rmi_mf = ta.mfi(hlc3, rmi_Length)
rmi_rsi_mfi = math.avg(rmi_rsi,rmi_mf)


//------------------- }

bool rmi_p_mom                          = rmi_rsi_mfi[1] < rmi_pmom and
      rmi_rsi_mfi > rmi_pmom and
      rmi_rsi_mfi > rmi_nmom and
       ta.change(ta.ema(close,5)) > 0

bool rmi_n_mom                          = rmi_rsi_mfi < rmi_nmom and
      ta.change(ta.ema(close,5)) < 0
// //  ---> Momentums ------------- {

if rmi_p_mom
    rmi_positive:= true
    rmi_negative:= false

if rmi_n_mom
    rmi_positive:= false
    rmi_negative:= true     


method rmi_Band(int len)=>
    math.min (ta.atr (len) * 0.3, close * (0.3/100)) [20] /2 * 8 


rmi_Band = rmi_Band(30) 


method rmi_rangeMA(float Range,Prd)=>
    weight = Range / math.sum(Range, Prd)
    sum = math.sum(close * weight, Prd)
    tw= math.sum(weight, Prd)
    sum / tw


// Calculate the RWMA
rmi_rwma = rmi_rangeMA(rmi_BarRange,20)

// Plotting the RWMA.
rmi_RWMA = rmi_positive ? rmi_rwma - rmi_Band : rmi_negative ? rmi_rwma + rmi_Band : na

rmi_max = rmi_RWMA + rmi_Band
rmi_min = rmi_RWMA - rmi_Band


rmi_buy = rmi_positive and not rmi_positive[1]
rmi_sell = rmi_negative and not rmi_negative[1]

rmi_buy_filter = rmi_positive
rmi_sell_filter = rmi_negative

// end rmi trend
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// supertrend
source = close
groupTitleST1 = "SuperTrend1"
atrPeriod = input.int(20,    "ATR Length", minval = 1, group = groupTitleST1)
factor =    input.float(20.0, "Factor",     minval = 0.01, step = 0.01, group = groupTitleST1)
showSTplot = input.bool(defval=false, title="Show Supertrend Plots", group = groupTitleST1)

[supertrend, ST_direction] = ta.supertrend(factor, atrPeriod)

supertrend := barstate.isfirst ? na : supertrend


upTrend =    plot(showSTplot and ST_direction < 0 ? supertrend : na, "Up Trend",   color = TTBColors.colorUp(), style = plot.style_linebr)
downTrend =  plot(showSTplot and ST_direction > 0 ? supertrend : na, "Down Trend", color = TTBColors.colorDown(),   style = plot.style_linebr)



STlongTrigger = ta.crossover(close, supertrend)
STshortTrigger = ta.crossunder(close, supertrend)
STlongFilter = ST_direction < 0
STshortFilter = ST_direction > 0

// supertrend2
source2 = close
groupTitleST2 = "SuperTrend2"
atrPeriod2 = input.int(30, "ATR Length for ST2", minval = 1, group = groupTitleST2)
factor2 = input.float(40.0, "Factor for ST2", minval = 0.01, step = 0.01, group = groupTitleST2)
showST2plot = input.bool(defval=false, title="Show Supertrend2 Plots", group = groupTitleST2)

[supertrend2, ST_direction2] = ta.supertrend(factor2, atrPeriod2)

supertrend2 := barstate.isfirst ? na : supertrend2

upTrend2 = plot(showST2plot and ST_direction2 < 0 ? supertrend2 : na, "Up Trend ST2", color = TTBColors.colorUp(), style = plot.style_linebr)
downTrend2 = plot(showST2plot and ST_direction2 > 0 ? supertrend2 : na, "Down Trend ST2", color = TTBColors.colorDown(), style = plot.style_linebr)
//bodyMiddle2 = plot(showST2plot and barstate.isfirst ? na : (open + close) / 2, "Body Middle ST2",display = display.none)



ST2longTrigger = ta.crossover(close, supertrend2)
ST2shortTrigger = ta.crossunder(close, supertrend2)
ST2longFilter = ST_direction2 < 0
ST2shortFilter = ST_direction2 > 0


// end supertrend
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// half trend
groupTitleHalfTrend = "Half Trend"
amplitude = input(title='Amplitude', defval=20, group = groupTitleHalfTrend)
channelDeviation = input(title='Channel Deviation', defval=20, group = groupTitleHalfTrend)
showArrows = input(title='Show Arrows', defval=false, group = groupTitleHalfTrend)
showChannels = input(title='Show Channels', defval=false, group = groupTitleHalfTrend)

var int trend = 0
var int nextTrend = 0
var float maxLowPrice = nz(low[1], low)
var float minHighPrice = nz(high[1], high)

var float up = 0.0
var float down = 0.0
float atrHigh = 0.0
float atrLow = 0.0
float arrowUp = na
float arrowDown = na

atr2 = ta.atr(100) / 2
dev = channelDeviation * atr2

highPrice = high[math.abs(ta.highestbars(amplitude))]
lowPrice = low[math.abs(ta.lowestbars(amplitude))]
highma = ta.sma(high, amplitude)
lowma = ta.sma(low, amplitude)

if nextTrend == 1
    maxLowPrice := math.max(lowPrice, maxLowPrice)

    if highma < maxLowPrice and close < nz(low[1], low)
        trend := 1
        nextTrend := 0
        minHighPrice := highPrice
        minHighPrice
else
    minHighPrice := math.min(highPrice, minHighPrice)

    if lowma > minHighPrice and close > nz(high[1], high)
        trend := 0
        nextTrend := 1
        maxLowPrice := lowPrice
        maxLowPrice

if trend == 0
    if not na(trend[1]) and trend[1] != 0
        up := na(down[1]) ? down : down[1]
        arrowUp := up - atr2
        arrowUp
    else
        up := na(up[1]) ? maxLowPrice : math.max(maxLowPrice, up[1])
        up
    atrHigh := up + dev
    atrLow := up - dev
    atrLow
else
    if not na(trend[1]) and trend[1] != 1
        down := na(up[1]) ? up : up[1]
        arrowDown := down + atr2
        arrowDown
    else
        down := na(down[1]) ? minHighPrice : math.min(minHighPrice, down[1])
        down
    atrHigh := down + dev
    atrLow := down - dev
    atrLow

ht = trend == 0 ? up : down

var color buyColor = TTBColors.colorUp()
var color sellColor = TTBColors.colorDown()

htColor = trend == 0 ? buyColor : sellColor


buySignal = not na(arrowUp) and trend == 0 and trend[1] == 1
sellSignal = not na(arrowDown) and trend == 1 and trend[1] == 0

plotshape(showArrows and buySignal ? atrLow : na, title='Arrow Up', style=shape.triangleup, location=location.absolute, size=size.tiny, color=color.new(buyColor, 0))
plotshape(showArrows and sellSignal ? atrHigh : na, title='Arrow Down', style=shape.triangledown, location=location.absolute, size=size.tiny, color=color.new(sellColor, 0))




// end half trend
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//dominant macd

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//
//======================
//Adapted FROM http://www.davenewberg.com/Trading/TS_Code/Ehlers_Indicators/Cycle_Period_Calculator.html
//======================


Price = hl2
//alpha1 = input.float(0.07, minval=0, maxval=1)
alpha1 = 0.07
Smooth = (Price + 2 * Price[1] + 2 * Price[2] + Price[3]) / 6
Cycle = 0.
InstPeriod = 0.
Q1 = 0.
DeltaPhase = 0.
I1 = 0.
DominantPeriod = 0.

Cycle := (1 - .5 * alpha1) * (1 - .5 * alpha1) * (Smooth - 2 * Smooth[1] + Smooth[2]) + 2 * (1 - alpha1) * nz(Cycle[1]) - (1 - alpha1) * (1 - alpha1) * nz(Cycle[2])
Q1 := (.0962 * Cycle + .5769 * Cycle[2] - .5769 * Cycle[4] - .0962 * Cycle[6]) * (.5 + .08 * nz(InstPeriod[1]))
I1 := Cycle[3]
DeltaPhase := Q1 != 0 and Q1[1] != 0 ? (I1 / Q1 - I1[1] / Q1[1]) / (1 + I1 * I1[1] / (Q1 * Q1[1])) : na
DeltaPhase := DeltaPhase < 0.1 ? 0.1 : DeltaPhase
DeltaPhase := DeltaPhase > 1.1 ? 1.1 : DeltaPhase
MedianDelta = ta.percentile_nearest_rank(DeltaPhase, 5, 50)
DC = MedianDelta == 0 ? 15 : 6.28318 / MedianDelta + 0.5
InstPeriod := .33 * DC + .67 * nz(InstPeriod[1])
DominantPeriod := .15 * InstPeriod + .85 * nz(DominantPeriod[1])


fastper = int(DominantPeriod)
slowper = int(2 * DominantPeriod + 1)


pine_ema(src, length) =>
    _alpha = 2 / (length + 1)
    sum = 0.0
    sum := na(sum[1]) ? ta.sma(src, length) : _alpha * src + (1 - _alpha) * nz(sum[1])
    sum


//src = input(hl2, 'macd source')
src = hl2
slow_ema = pine_ema(src, nz(slowper, 26))
fast_ema = pine_ema(src, nz(fastper, 12))

MACD = fast_ema - slow_ema
signal_MACD = ta.ema(MACD, 9)



hist = MACD - signal_MACD


DomMCADRisingBuyFilter = MACD > MACD[1]
DomMCADFallingSellFilter = MACD < MACD[1]
DomMCAD_OB_BuyFilter = signal_MACD > 0
DomMCAD_OS_SellFilter= signal_MACD < 0
DomMCAD_OS_BuyFilter = signal_MACD < 0
DomMCAD_OB_SellFilter= signal_MACD > 0

//  end  dominant macd
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}



// Date Ranges
show_table = input(true, title='Show table')
text_size_switch = input(true, title='Small text in the table')
from_month = input.int(defval=5, title='From Month', minval=1, maxval=12)
from_day = input.int(defval=1, title='From Day', minval=1, maxval=31)
from_year = input(defval=2021, title='From Year')
to_month = input.int(defval=12, title='To Month', minval=1, maxval=12)
to_day = input.int(defval=1, title='To Day', minval=1, maxval=31)
to_year = input(defval=2024, title='To Year')
start = timestamp(from_year, from_month, from_day, 00, 00)  // backtest start window
finish = timestamp(to_year, to_month, to_day, 23, 59)  // backtest finish window
window = time >= start and time <= finish ? true : false  // create function "within window of time"


// Triggers
long_trigger = input(title='Long trigger value', defval=1)
short_trigger = input(title='Short trigger value', defval=-1)
trigger = input(defval=close, title="Enter trigger")

var current_so = 0
var current_S_so = 0
var initial_order = 0.0
var initial_S_order = 0.0
var original_ttp_value = 0.0
var quantity = 0.0
var entry_price = 0.0
var firstBarTime = 0.0
var maxDiffDays = 0.0
var soCount = 0
var SO1 = 0
var SO2 = 0
var SO3 = 0
var SO4 = 0
var SO5 = 0
var SO6 = 0
var SO7 = 0
var noSO = 0
var initial_price = 0.0
var initial_S_price = 0.0
var price_drop = 0.0
var price_pump = 0.0
var max_drop = 0.0
var max_pump = 0.0
var pump_date = 0
var pump_month = 0
var drop_date = 0
var drop_month = 0
var longest_trade_day = 0
var longest_trade_month = 0
var take_profit_level = 0.0
var take_S_profit_level = 0.0
var tp_plot = 0.0
var tp_S_plot = 0.0
var threshold = 0.0
var S_threshold = 0.0
timeDiff = time - firstBarTime
maxDev = 0.0
maxSDev = 0.0
closedTrades = 0
var tradeCount = 0
var i = 0
var avg_price = 0.0
var total_funds_in_trade = 0.0
var total_qty_in_trade = 0.0
var capital = 100.0

// Turn that time difference into days
diffDays = timeDiff / 86400000

// Calculate our TP levels
take_profit_level := avg_price * (1 + take_profit)
take_S_profit_level := avg_price * (1 - take_S_profit)


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//Long and short entry
///Strategy Inputs
groupTitleLongEntry = "Long Entry"
trigger_long_Input = input.bool(true, "Trigger Long", group = groupTitleLongEntry)
//AIbuyInput = input.bool(true, "AI Buy", group = groupTitleLongEntry)
rmi_buyInput = input.bool(false, "RMI Buy", group = groupTitleLongEntry)
rmi_buy_filterInput = input.bool(false, "RMI Buy Filter", group = groupTitleLongEntry)
STlongTriggerInput = input.bool(false, "ST Long Trigger", group = groupTitleLongEntry)
STlongFilterInput = input.bool(false, "ST Long Filter", group = groupTitleLongEntry)
ST2longTriggerInput = input.bool(false, "ST2 Long Trigger", group = groupTitleLongEntry)
ST2longFilterInput = input.bool(true, "ST2 Long Filter", group = groupTitleLongEntry)
//JMA1LongTriggerInput = input.bool(false, "JMA1 Long Trigger", group = groupTitleLongEntry)
//JMA1LongFilterInput = input.bool(false, "JMA1 Long Filter", group = groupTitleLongEntry)
//JMA2LongTriggerInput = input.bool(false, "JMA2 Long Trigger", group = groupTitleLongEntry)
//JMA2LongFilterInput = input.bool(false, "JMA2 Long Filter", group = groupTitleLongEntry)
HTbuyInput = input.bool(false, "HT Buy", group = groupTitleLongEntry)
DomMCADRisisingBuyFilterInput = input.bool(true, "DomMCAD Rising Buy Filter", group = groupTitleLongEntry)
DomMCAD_OB_BuyFilterInput = input.bool(false, "DomMCAD OB Buy Filter", group = groupTitleLongEntry)
DomMCAD_OS_BuyFilterInput = input.bool(false, "DomMCAD OS Buy Filter", group = groupTitleLongEntry)


groupTitleShortEntry = "Short Entry"
trigger_short_Input = input.bool(false, "Trigger Short", group = groupTitleShortEntry)
//AIsellInput = input.bool(false, "AI Sell", group = groupTitleShortEntry)
rmi_sellInput = input.bool(false, "RMI Sell", group = groupTitleShortEntry)
rmi_sell_filterInput = input.bool(false, "RMI Sell Filter", group = groupTitleShortEntry)
STshortTriggerInput = input.bool(false, "ST Short Trigger", group = groupTitleShortEntry)
STshortFilterInput = input.bool(false, "ST Short Filter", group = groupTitleShortEntry)
ST2shortTriggerInput = input.bool(false, "ST2 Short Trigger", group = groupTitleShortEntry)
ST2shortFilterInput = input.bool(false, "ST2 Short Filter", group = groupTitleShortEntry)
//JMA1ShortTriggerInput = input.bool(false, "JMA1 Short Trigger", group = groupTitleShortEntry)
//JMA1ShortFilterInput = input.bool(false, "JMA1 Short Filter", group = groupTitleShortEntry)
//JMA2ShortTriggerInput = input.bool(false, "JMA2 Short Trigger", group = groupTitleShortEntry)
//JMA2ShortFilterInput = input.bool(false, "JMA2 Short Filter", group = groupTitleShortEntry)
HTsellInput = input.bool(false, "HT Sell", group = groupTitleShortEntry)
DomMCADFallingSellFilterInput = input.bool(false, "DomMCAD Falling Sell Filter", group = groupTitleShortEntry)
DomMCAD_OS_SellFilterInput = input.bool(false, "DomMCAD OS Sell Filter", group = groupTitleShortEntry)
DomMCAD_OB_SellFilterInput = input.bool(false, "DomMCAD OB Sell Filter", group = groupTitleShortEntry)


groupTitleSOsExit = "SOs and Exit"
use_rmi_filter_for_subsequent_sos = input.bool(true, "Use RMI Filter for subsequent SOs", group = groupTitleSOsExit)
use_last_SO_as_SL = input.bool(false, "Use Last SO as Stop Loss", group = groupTitleSOsExit)

// First Position
//for i = 0 to max_safe_order - 1 by 1
for j = 0 to max_safe_order - 1 by 1
    maxDev := int((maxDev + price_deviation * 100 * math.pow(safe_order_step_scale, i)) * 100) / 100
    maxDev
//for i = 0 to max_S_safe_order - 1 by 1
for j = 0 to max_S_safe_order - 1 by 1
    maxSDev := int((maxSDev + price_S_deviation * 100 * math.pow(safe_S_order_step_scale, i)) * 100) / 100
    maxSDev

//strategy.close_all(math.abs(strategy.position_size) != 0 and current_so[1] == 0)
if math.abs(strategy.position_size) != 0 and current_so[1] == 0
    strategy.close_all()

var int longEntryBarIndex = na
var int shortEntryBarIndex = na

//plot(long_trigger ? 1 : 0, title="Long Trigger", color=color.green)

if long and strategy.position_size == 0 and source_function(source_type) > 0 and window and not(hour(time) == 0 and minute(time) < 59) and (rmi_buyInput ? rmi_buy : true) and (STlongTriggerInput ? STlongTrigger : true) and (STlongFilterInput ? STlongFilter : true) and (ST2longTriggerInput ? ST2longTrigger : true) and (ST2longFilterInput ? ST2longFilter : true) and (trigger_long_Input ? trigger == long_trigger : true) and (HTbuyInput ? buySignal : true) and (DomMCADRisisingBuyFilterInput ? DomMCADRisingBuyFilter : true) and (DomMCAD_OB_BuyFilterInput ? DomMCAD_OB_BuyFilter : true) and (DomMCAD_OS_BuyFilterInput ? DomMCAD_OS_BuyFilter : true) and (rmi_buy_filterInput ? rmi_buy_filter : true)//and (JMA1LongTriggerInput ? JMA1LongTrigger : true) and (JMA1LongFilterInput ? JMA1LongFilter : true) and (JMA2LongTriggerInput ? JMA2LongTrigger : true) and (JMA2LongFilterInput ? JMA2LongFilter : true) and (AIbuyInput ? AIbuy : true) 
    _string_long = 'type=order,order-type=long,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_order/10000) + ',comment="' + version + '-' + tf + '"'
    strategy.entry('Long @' + str.tostring(source_function(source_type)), strategy.long, qty=base_order, alert_message=_string_long)
    initial_order := source_function(source_type)
    current_so := 1
    initial_price := close
    price_drop := close
    original_ttp_value := 0
    firstBarTime := time
    tradeCount += 1
    avg_price := close
    total_funds_in_trade := avg_price * base_order
    total_qty_in_trade := base_order
    total_qty_in_trade
    longEntryBarIndex := bar_index


else if short and strategy.position_size == 0 and source_function(source_type) > 0 and window and not(hour(time) == 0 and minute(time) < 59) and (rmi_sellInput ? rmi_sell : true) and (STshortTriggerInput ? STshortTrigger : true) and (STshortFilterInput ? STshortFilter : true) and (ST2shortTriggerInput ? ST2shortTrigger : true) and (ST2shortFilterInput ? ST2shortFilter : true) and (trigger_short_Input ? trigger == short_trigger : true) and (HTsellInput ? sellSignal : true)  and (DomMCADFallingSellFilterInput ? DomMCADFallingSellFilter : true) and (DomMCAD_OS_SellFilterInput ? DomMCAD_OS_SellFilter : true) and (DomMCAD_OB_SellFilterInput ? DomMCAD_OB_SellFilter : true) and (rmi_sell_filterInput ? rmi_sell_filter : true) //and (JMA1ShortTriggerInput ? JMA1ShortTrigger : true) and (JMA1ShortFilterInput ? JMA1ShortFilter : true) and (JMA2ShortTriggerInput ? JMA2ShortTrigger : true) and (JMA2ShortFilterInput ? JMA2ShortFilter : true) and (AIsellInput ? AIsell : true) 
    _string_short = 'type=order,order-type=short,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_S_order/10000) + ',comment="' + version + '-' + tf + '"'
    strategy.entry('Short @' + str.tostring(source_function(source_type)), strategy.short, qty=base_S_order, alert_message=_string_short)
    initial_S_order := source_function(source_type)
    current_so := 1
    firstBarTime := time
    tradeCount += 1
    initial_S_price := close
    price_pump := close
    avg_price := close
    total_funds_in_trade := avg_price * base_S_order
    total_qty_in_trade := base_S_order
    total_qty_in_trade
    shortEntryBarIndex := bar_index


//makes the red and green line plot pretty at the position opening
if strategy.position_size == 0
    threshold := low[1]
    S_threshold := high[1]
    S_threshold


//Safety order levels
if strategy.position_size > 0 and i == 0
    if safe_order_step_scale == 1.0
        threshold := initial_order - initial_order * price_deviation * safe_order_step_scale * safe_order_step_scale_Multiplier * current_so
        threshold
    else
        threshold := initial_order - initial_order * (price_deviation * (math.pow(safe_order_step_scale * safe_order_step_scale_Multiplier, current_so) - 1) / (safe_order_step_scale - 1))
        threshold

// Modify the calculation of the threshold for short positions
else if strategy.position_size < 0 and i == 0
    if safe_S_order_step_scale == 1.0
        S_threshold := initial_S_order * (1 + price_S_deviation * current_so)
        S_threshold
    else
        S_threshold := initial_S_order * (1 + price_S_deviation * (math.pow(safe_S_order_step_scale * safe_order_step_scale_Multiplier, current_so) - 1) / (safe_S_order_step_scale - 1))
        S_threshold


// Long SO (Average Down)
// Average Down
if current_so > 0 and i == 0 and strategy.position_size > 0 and low <= threshold and current_so <= max_safe_order and not(hour(time) == 0 and minute(time) < 59) and (not use_rmi_filter_for_subsequent_sos or rmi_buy_filter)
    if use_last_SO_as_SL and current_so == max_safe_order
        _string_close_long = 'type=order,order-type=closelong,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + tf + '"'
        strategy.close_all(comment='Stop Loss @' + str.tostring(source_function(source_type)), alert_message=_string_close_long)
        soCount := current_so
        current_so := 0
        original_ttp_value := 0
        price_drop := na
        initial_price := na
        diffDays := time - firstBarTime
        if diffDays > maxDiffDays
            maxDiffDays := diffDays
            longest_trade_day := dayofmonth
            longest_trade_month := month
            longest_trade_month
        i := 1
        initial_order := 0.0
        avg_price := na
    else
        _string_long_so = 'type=order,order-type=long,symbol=' + str.replace(syminfo.ticker, " ", "") + '.PRO' + ',risk=' + str.tostring((safe_order * math.pow(safe_order_volume_scale, current_so - 1)) / 10000) + ',comment="' + version + '-' + tf + '"'
        strategy.entry('SO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.long, qty=safe_order * math.pow(safe_order_volume_scale, current_so - 1), alert_message=_string_long_so)
        total_funds_in_trade += threshold * safe_order * math.pow(safe_order_volume_scale, current_so - 1)
        total_qty_in_trade += safe_order * math.pow(safe_order_volume_scale, current_so - 1)
        avg_price := total_funds_in_trade / total_qty_in_trade
        current_so += 1
        tradeCount += 1
        tradeCount


// Short SO (Average Up)
if current_so > 0 and i == 0 and strategy.position_size < 0 and high >= S_threshold and current_so <= max_S_safe_order and not(hour(time) == 0 and minute(time) < 59) and (not use_rmi_filter_for_subsequent_sos or rmi_sell_filter)
    if use_last_SO_as_SL and current_so == max_S_safe_order
        _string_close_short = 'type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + tf + '"'
        strategy.close_all(comment='Stop Loss Short @' + str.tostring(source_function(source_type)), alert_message=_string_close_short)
        soCount := current_so
        current_so := 0
        price_pump := na
        initial_S_price := na
        diffDays := time - firstBarTime
        if diffDays > maxDiffDays
            maxDiffDays := diffDays
            maxDiffDays
        initial_S_order := 0.0
        avg_price := na
    else
        _string_short_so = 'type=order,order-type=short,symbol=' + str.replace(syminfo.ticker, " ", "") + '.PRO' + ',risk=' + str.tostring((safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)) / 10000) + ',comment="' + version + '-' + tf + '"'
        strategy.entry('SSO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.short, qty=safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1), alert_message=_string_short_so)
        total_funds_in_trade += S_threshold * safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)
        total_qty_in_trade += safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)
        avg_price := total_funds_in_trade / total_qty_in_trade
        current_so += 1
        tradeCount += 1
        tradeCount



// Take Profit! 
if i == 1
    strategy.close_all()
    i := 0
    i

if take_profit_level <= high and strategy.position_size > 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_close_long = 'type=order,order-type=closelong,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + tf + '"'
    strategy.close_all(comment='Close @' + str.tostring(source_function(source_type)), alert_message=_string_close_long)
    soCount := current_so
    current_so := 0
    original_ttp_value := 0
    price_drop := na
    initial_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        longest_trade_day := dayofmonth
        longest_trade_month := month
        longest_trade_month
    i := 1
    initial_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_profit / 100)
    capital


// Take Short Profit! 
if take_S_profit_level >= low and strategy.position_size < 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_close_short = 'type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + tf + '"'
    strategy.close_all(comment='Close Short @' + str.tostring(source_function(source_type)), alert_message=_string_close_short)
    soCount := current_so
    current_so := 0
    price_pump := na
    initial_S_price := na
    diffDays := time - firstBarTime
    if diffDays > maxDiffDays
        maxDiffDays := diffDays
        maxDiffDays
    initial_S_order := 0.0
    avg_price := na
    capital *= (1 + total_qty_in_trade * take_S_profit / 100)
    capital



//Table building and calculations
if strategy.position_size == 0
    if soCount == 1
        noSO += 1
        noSO
    else if soCount == 2
        SO1 += 1
        SO1
    else if soCount == 3
        SO2 += 1
        SO2
    else if soCount == 4
        SO3 += 1
        SO3
    else if soCount == 5
        SO4 += 1
        SO4
    else if soCount == 6
        SO5 += 1
        SO5
    else if soCount == 7
        SO6 += 1
        SO6
    else if soCount == 8
        SO7 += 1
        SO7
    soCount := 0
    soCount
closedTrades := noSO + SO1 * 2 + SO2 * 3 + SO3 * 4 + SO4 * 5 + SO5 * 6 + SO6 * 7 + SO7 * 8

if low < price_drop and window and strategy.position_size > 0
    price_drop := low
    if max_drop < int((1 - price_drop / initial_price) * 10000) / 100
        max_drop := int((1 - price_drop / initial_price) * 10000) / 100
        drop_date := dayofmonth(time)
        drop_month := month(time)
        drop_month
bgcolor(max_drop[1] < max_drop ? color.new(color.rgb(11, 90, 100), 50) : na)

if high > price_pump and window and strategy.position_size < 0
    price_pump := high
    if max_pump < int((price_pump / initial_S_price - 1) * 10000) / 100
        max_pump := int((price_pump / initial_S_price - 1) * 10000) / 100
        pump_date := dayofmonth(time)
        pump_month := month(time)
        pump_month
bgcolor(max_pump[1] < max_pump ? color.new(color.rgb(155, 39, 176), 70) : na)

if take_profit_level > 0 and strategy.position_size > 0
    tp_plot := take_profit_level
    tp_plot
else
    tp_plot := close
    tp_plot

if take_S_profit_level > 0 and strategy.position_size < 0
    tp_S_plot := take_S_profit_level
    tp_S_plot
else
    tp_S_plot := close
    tp_S_plot

//Plotting the levels
p1 = plot(tp_plot, color=strategy.position_size <= 0 ? na : TTBColors.colorUp()) // Up color
p2 = plot(avg_price, color=strategy.position_size == 0 ? na : TTBColors.colorNeutral()) // Neutral color
p3 = plot(threshold, color=strategy.position_size <= 0 ? na : TTBColors.colorDown()) // Down color
p4 = plot(tp_S_plot, color=strategy.position_size >= 0 ? na : TTBColors.colorUpPlus()) // UpPlus color
p5 = plot(S_threshold, color=strategy.position_size >= 0 ? na : TTBColors.colorDownPlus()) // DownPlus color
fill(p1, p2, color=strategy.position_size > 0 ? color.new(TTBColors.colorUp(), 90) : na) // Semi-transparent Up color
fill(p2, p3, strategy.position_size > 0 ? color.new(TTBColors.colorNeutral(), 90) : na) // Semi-transparent Neutral color
fill(p4, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorUpPlus(), 90) : na) // Semi-transparent UpPlus color
fill(p5, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorDownPlus(), 90) : na) // Semi-transparent DownPlus color
profit_color = strategy.openprofit < 0 ? TTBColors.colorDown() : TTBColors.colorUp() // Down color for loss, Up color for profit

text_size = text_size_switch ? size.small : size.normal


//Table formatting
if show_table
    var Table = table.new(position.bottom_right, columns=2, rows=20, border_width=1, bgcolor=color.new(#363a45, 0), border_color=color.gray)
    table.cell(table_id=Table, column=0, row=0, text_color=color.gray, text_size=text_size, text='Net Profit')
    table.cell(table_id=Table, column=1, row=0, text=str.tostring(int((capital - 100) * 100) / 100) + '%', text_size=text_size, text_color=TTBColors.colorUplight())
    table.cell(table_id=Table, column=0, row=1, text_color=color.gray, text_size=text_size, text='Max Deviation ')
    table.cell(table_id=Table, column=1, row=1, text=str.tostring(maxDev) + '%', text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=2, text_color=color.gray, text_size=text_size, text='Max Short Dev ')
    table.cell(table_id=Table, column=1, row=2, text=str.tostring(maxSDev) + '%', text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=3, text='No SO ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=3, text=str.tostring(noSO), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=4, text='SO 1 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=4, text=str.tostring(SO1), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=5, text='SO 2 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=5, text=str.tostring(SO2), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=6, text='SO 3 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=6, text=str.tostring(SO3), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=7, text='SO 4 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=7, text=str.tostring(SO4), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=8, text='SO 5 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=8, text=str.tostring(SO5), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=9, text='SO 6 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=9, text=str.tostring(SO6), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=10, text='SO 7 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=10, text=str.tostring(SO7), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=11, text='Closed/Open trades', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=11, text=str.tostring(strategy.closedtrades) + '/' + str.tostring(strategy.opentrades), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=12, text='Current Deal Time', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=12, text=strategy.position_size != 0 ? str.tostring(int((time - firstBarTime) / 8640000) / 10) + ' days' : '0', text_size=text_size, text_color=color.green)
    table.cell(table_id=Table, column=0, row=13, text='Unrealized position', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=13, text=str.tostring(int(strategy.openprofit / (strategy.initial_capital + strategy.netprofit) * 10000) / 100) + ' %', text_size=text_size, text_color=profit_color)
    table.cell(table_id=Table, column=0, row=14, text='Longest deal:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=14, text=str.tostring(int(maxDiffDays / 8640000) / 10) + ' days, ' + str.tostring(longest_trade_day) + '/' + str.tostring(longest_trade_month), text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=15, text='Max price drop:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=15, text=str.tostring(max_drop) + ' %, ' + str.tostring(drop_date) + '/' + str.tostring(drop_month), text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=16, text='Max price pump:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=16, text=str.tostring(max_pump) + ' %, ' + str.tostring(pump_date) + '/' + str.tostring(pump_month), text_size=text_size, text_color=TTBColors.colorDownlight())
