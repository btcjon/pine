// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © colgunn

//@version=5

strategy("Scale In : Scale Out",
  overlay = true,
  currency=currency.USD, 
  initial_capital = 1000000.0,
  commission_type = strategy.commission.percent,
  commission_value = 0.006,
  process_orders_on_close = true,
  margin_long = 100,
  margin_short = 100,
  pyramiding = 1000000,
  max_labels_count = 500,
  use_bar_magnifier = true) // premium accounts only

// symbol and ticker
var sym_type = syminfo.type
var sym_is_partial_qty = not (sym_type == "stock" or sym_type == "fund")

// timeframe
var tf = "D"
if timeframe.isdaily
    tf := "day"
else if timeframe.isweekly
    tf := "week"
else if timeframe.ismonthly
    tf := "month"
else if timeframe.isminutes
    tf := "minute"
else if timeframe.isseconds
    tf := "second"
var tf_multiplier = timeframe.multiplier

// User input 
start_unix_time = input.time(timestamp("2022-01-01T00:00:00"), "Start Date/Time")
finish_unix_time = input.time(timestamp("2024-12-31T23:59:59"), "Finish Date/Time")
initial_capital = input.int(1000000, "Initial Capital", 0, 100000000, 1000,
  "The initial capital (cash) in currency.") * 1.0
buy_scaling_size = input.float(2, "Buy Scaling Size %", 0.1, 100.0, 0.5,
  "The percentage of deployable cash to spend per bar when scaling (averaging) in. For example to scale in over 365 daily bars, percentage = 100/365 = 0.274%. See also Retain Profit Portion %.")
take_profit_level = input.float(50.0, "Take Profit Level %", 1.0, 1000.0, 0.5,
  "The minimum percentage profit level to trigger selling (profit taking). See also Take Profit Position Portion %.")
take_profit_position_portion = input.float(1.0, "Take Profit Size %", 0.5, 100.0, 0.5,
  "The percentage of current position to sell per bar when taking profits. See also Take Profit Level %.")
retain_profit_portion = input.float(50.0, "Retain Profit Portion %", 0.0, 100.0, 1.0,
  "The portion of realised profit to retain on each sell. The remaining realised profit will be allocated to deployable cash for future buys. See also Buy Scaling Size.") / 100.0
min_position_value = input.int(200000, "Minimum Position Value", 0, 100000000, 100000,
  "The minimum capital at risk in currency. Profit taking will not start if market value of position is below this value.") * 1.0
min_buy_value = input.int(100, "Minimum Buy Value $", 0, 1000000, 10,
  "The minimum value of any buy trade in currency. Should be proprtional to the unit cost of the target asset. For assets which can be bought in partial units (e.g. crypto), this value should be set to ensure impractically small buys do not occur.") * 1.0
annual_interest_rate = input.float(3.5, "Annual Interest Rate %", 0.0, 100.0, 0.5,
  "The annual interest rate which current cash balance earns. Interest earnings will be applied on a daily basis at [annual rate / 365]. If the bar period is less than a day, interest will not be applied.") / 100.0
commission = input.float(0.6, "Commission %", 0.0, 50.0, 0.01,
  "Brokerage commision percentage.") / 100.0

get_take_profit_level() =>
    take_profit_level

get_take_profit_size() =>
    take_profit_position_portion

get_buy_scaling_size() =>
    buy_scaling_size

get_status_modulus() =>
    if tf == "month"
        4
    else if tf == "week"
        13
    else if tf == "day"
        90
    else if tf == "hour"
        240
    else if tf == "minute"
        1200
    else if tf == "second"
        2400
    else
        0

get_days_in_bar() => 
    if tf == "month"
        30.0
    else if tf == "week"
        7.0
    else if tf == "day"
        1.0
    else if tf == "hour"
        1.0 / 24
    else if tf == "minute"
        1.0 / (24 * 60)
    else if tf == "second"
        1.0 / (24 * 60 * 60)
    else
        0

// constant values
var trade_id = "dca"
// var start_bar = 3 * 365 // 365
// var finish_bar = 1 * 365 // 365

// global vars
var retained_cash = 0.0
var deployable_cash = initial_capital
var min_cash = initial_capital
var last_bar_index_sold = -1
var last_price_sold = 0.0
var total_units_sold = 0.0
var position_size = 0.0
var position_avg_price = 0.0
var index = 0
var trade_count = 0
var total_spend = 0.0
var total_sales = 0.0
var total_interest_earned = 0.0
var first_price = 0.0

// A = P (1 + r/n)^(nt)
// Where:
// - A is the amount of money accumulated after n years, including interest.
// - P is the principal amount (the initial amount of money).
// - r is the annual interest rate (in decimal).
// - n is the number of times that interest is compounded per year.
// - t is the time the money is invested for in years.
//
// If compounding daily, n would be 365 (or 366 for a leap year).
// If you're given a daily interest rate and you want to calculate the interest earned on a compounding basis over 30 days, you can use the formula for compound interest:
// A = P (1 + r/n)^(nt)
// In this case, n would be 1 (since the interest is compounded daily), and t would be 30/365 (since you're calculating for 30 days, not a full year).

calc_interest() =>
    days = get_days_in_bar()
    if (days < 1.0 or annual_interest_rate == 0.0)
        0.0
    else    
        P = deployable_cash + retained_cash
        A = P * math.pow(1.0 + (annual_interest_rate / 365.0), days)
        A - P

flt2str2(lbl, flt) =>
    lbl + " " + str.format("{0,number,#.##}", flt)

flt2str6(lbl, flt) =>
    lbl + " " + str.format("{0,number,#.######}", flt)

flt2currK(lbl, flt) =>
    k = flt / 1000.0
    lbl + " " + str.format("{0,number,currency}", k) + "K"

flt2curr(lbl, flt) =>
    lbl + " " + str.format("{0,number,currency}", flt)

flt2pc(lbl, flt) =>
    lbl + " " + str.format("{0,number,#.##}", flt) + "%"

calc_cash_balance() =>
    retained_cash + deployable_cash

calc_cash_profit() =>
    calc_cash_balance() - initial_capital

calc_position_cost() => 
    position_size * position_avg_price

calc_position_value_at_close() => 
    position_size * close

// calc_upper_stdev_band() =>
//     stdev_ma + stdev

// within_volatility_limit() =>
//     true or close < calc_upper_stdev_band()

add_status_label() =>
    mod = get_status_modulus()
    if barstate.islast or barstate.islastconfirmedhistory or index % mod == 0
        tp_level = get_take_profit_level()
        tp_size = get_take_profit_size()
        buy_scaling = get_buy_scaling_size()
        net_spend = total_spend - total_sales
        position_cost = calc_position_cost()
        current_close = close
        position_value = calc_position_value_at_close()
        pos_profit = position_value - position_cost
        pos_profit_pc = (position_cost == 0.0 ? 0.0 : pos_profit / position_cost) * 100.0
        cost_basis = initial_capital // total_spend < initial_capital ? total_spend : initial_capital
        cash_balance = calc_cash_balance()
        tot_equity= cash_balance + position_value 
        tot_profit = tot_equity - cost_basis
        tot_profit_pc = (cost_basis == 0.0 ? 0.0 : tot_profit / cost_basis) * 100.0
        bh_profit_pc = ((current_close - first_price) / first_price) * 100.0
        avg_sell_price = total_units_sold == 0.0 ? 0.0 : total_sales / total_units_sold
        tag = sym_type + " #" + str.tostring(index) + 
          "\n" + "TF=" + tf +
          "\n" + flt2pc("tp level%", tp_level) +
          "\n" + flt2pc("tp size%", tp_size) +
          "\n" + flt2str6("Interest Rate", annual_interest_rate) +
          "\n" + flt2str2("Days in Bar", get_days_in_bar()) +
          "\n" + flt2pc("Buy Scale%", buy_scaling) +
          "\n" + flt2currK("Curr Cash", cash_balance) +
          "\n" + flt2currK("Interest Earned", total_interest_earned) +
          "\n" + flt2str2("Pos Size", position_size) +
          "\n" + flt2curr("Av Price", position_avg_price) +
          "\n" + flt2currK("Pos Value", position_value) + 
          "\n" + flt2pc("Pos Gain%", pos_profit_pc) + 
          "\n" + flt2pc("Tot Gain%", tot_profit_pc) +
          "\n" + flt2pc("BH Gain", bh_profit_pc)
        tooltip = "#" + str.tostring(index) +
          "\n" + "Type = " + sym_type +
          "\n" + "TF=" + tf +
          "\n" + flt2pc("tp level%", tp_level) +
          "\n" + flt2pc("tp size%", tp_size) +
          "\n" + flt2pc("buy scale%", buy_scaling) +
          "\n" + flt2curr("Close", close) +
          "\n" + flt2curr("Last Sold P", last_price_sold) +
          "\n" + flt2curr("Avg Sell P", avg_sell_price) +
          "\n" + flt2currK("Curr Cash", cash_balance) +
          "\n" + flt2currK("Dep Cash", deployable_cash) +
          "\n" + flt2currK("Ret Cash", retained_cash) +
          "\n" + flt2currK("Interest Earned", total_interest_earned) +
          "\n" + flt2currK("Cash Spend", total_spend) + 
          "\n" + flt2currK("Cash Sales", total_sales) +
          "\n" + flt2currK("Net Spend", net_spend) +
          "\n" + flt2currK("Min Cash", min_cash) +
          "\n" + flt2str2("Pos Size", position_size) +
          "\n" + flt2curr("Av Price", position_avg_price) +
          "\n" + flt2currK("Pos Cost", position_cost) + 
          "\n" + flt2currK("Pos Value", position_value) + 
          "\n" + flt2currK("Pos Gain", pos_profit) + 
          "\n" + flt2pc("Pos Gain%", pos_profit_pc) + 
          "\n" + flt2currK("Tot Gain", tot_profit) +
          "\n" + flt2pc("Tot Gain%", tot_profit_pc) +
          "\n" + flt2pc("BH Gain", bh_profit_pc)
        lbl = label.new(bar_index, high, text=tag, yloc=yloc.abovebar, size=size.small, tooltip=tooltip)
        label.set_color(lbl, color.yellow)
        // label.set_size(lbl, size.large)

if barstate.isnew
    // bars_to_go = last_bar_index - bar_index
    // if (bars_to_go <= start_bar and bars_to_go >= finish_bar)
    bar_time = time(timeframe.period)   
    if bar_time >= start_unix_time and bar_time <= finish_unix_time
        index := index + 1
        current_close = close 
        if first_price == 0.0
            first_price := current_close
        position_size := strategy.position_size
        position_avg_price := strategy.position_avg_price
        position_cost = position_size * position_avg_price
        position_value = position_size * current_close
        position_profit_amount = current_close - position_avg_price
        position_profit_percent =position_avg_price > 0.0 ? (position_profit_amount / position_avg_price) * 100.0 : 0.0
        interest = calc_interest()
        total_interest_earned := total_interest_earned + interest
        retained_cash := retained_cash + interest
        if close > 0.001
            profit_taken = false
            if position_value >= min_position_value
                tp_level = get_take_profit_level()
                tp_size = get_take_profit_size()
                if position_profit_percent >= tp_level
                    sell_portion = (tp_size / 100.0) 
                    sell_value = position_value * sell_portion * (1.0 - commission)
                    qty = sell_value / current_close
                    if not sym_is_partial_qty
                        qty := math.floor(qty)
                        if qty == 0.0
                            qty := 1.0
                        sell_value := (qty * current_close) * (1.0 + commission)
                    if qty > 0.0
                        strategy.close(trade_id, qty=qty)
                        trade_count += 1
                        profit_taken := true
                        total_sales := total_sales + sell_value
                        retain = sell_value * retain_profit_portion
                        if (deployable_cash < initial_capital)
                            retain := math.min(retain * 0.5, initial_capital - deployable_cash)
                        retained_cash := retained_cash + retain
                        deploy = sell_value - retain
                        deployable_cash := deployable_cash + deploy
                        last_bar_index_sold := bar_index
                        last_price_sold := current_close
                        total_units_sold := total_units_sold + qty
 
            if not profit_taken // and (last_price_sold == 0.0 or current_close < last_price_sold) 
                if deployable_cash >= min_buy_value
                    buy_size = get_buy_scaling_size() / 100.0
                    spend = deployable_cash > initial_capital
                      ? deployable_cash * buy_size
                      : math.min(deployable_cash, initial_capital * buy_size)
                    if spend >= min_buy_value
                        spend_less_commission = spend * (1.0 - commission)
                        qty = spend_less_commission / current_close
                        if not sym_is_partial_qty
                            qty := math.floor(qty)
                            if qty == 0.0
                                qty := 1.0
                            spend := (qty * current_close) * (1.0 + commission)
                        if qty > 0.0 and spend <= deployable_cash   
                            total_spend := total_spend + spend
                            deployable_cash := deployable_cash - spend
                            strategy.entry(trade_id, strategy.long, qty=qty)
                            trade_count += 1

        position_size := strategy.position_size
        position_avg_price := strategy.position_avg_price
        cash_balance = calc_cash_balance()
        if cash_balance < min_cash
            min_cash := cash_balance
        add_status_label()
        total_units_sold := 0.0



plot(strategy.position_avg_price, color=color.yellow)