// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © thetradingbot

//1. Account Balance (initial_capital): $1,000,000
//2. Order Quantity Type (default_qty_type): Cash (strategy.cash)
//3. Order Quantity Value (default_qty_value): 1 standard lot in Forex = $100,000
//4. Leverage: 1:500
//5. Maximum Position Value: Account Balance Leverage = $1,000,000 500 = $500,000,000
//6. Maximum Lots: Maximum Position Value / Order Quantity Value = $500,000,000 / $100,000 = 5000 lots

//So, with an account balance of $1,000,000 and 1:500 leverage, you can open positions up to $500,000,000 in total value, which is equivalent to 5000 standard lots in Forex.

//@version=5
strategy("TTB S v3", overlay=true, initial_capital=1000000, default_qty_type=strategy.cash, default_qty_value=100000, currency=currency.USD, pyramiding=2)


//------------- STRATEGY Imputs ------------- { //
useTP = input(false, title="Use Take Profit")
tpPercent = input(0.5, title="Take Profit %")
Lots = input.float(1.01, title='Lots', step=0.01, minval=0.01)
AlertType = input.string(defval="Pineconnector", title="Alert Type", options=["Pineconnector", "System"])
isPineconnector = AlertType == "Pineconnector"
ID = input(defval='6700960415957', title='ID')
Comment = input.string("Structure1R", title='Comment', inline='Comment')

groupTitleFilters = "Strategy Filters"
flat_filter = input.bool(false, "ADXVMA Flat Filter", group = groupTitleFilters)
adxvma_period = input.int(4, minval=1, group = groupTitleFilters)
boostEntries = input.bool(false, "Enable Boost Entries", group = groupTitleFilters)
percentChangeCriteria = input(0.2, title="Boost %?", group = groupTitleFilters)
boost_pullback_filter = input.bool(false, "Enable Boost Pullback Filter", group = groupTitleFilters)
boost_pullback_bars = input(1, title="Boost Pullback Bars", group = groupTitleFilters)
dtrend_filter = input.bool(false, "Enable Don Trend Filter", group = groupTitleFilters)
dlen = input.int(defval=20, title='TTB Donchian Channel Period', minval=10, group = groupTitleFilters)

// Show Plots
groupTitleShowPlots = "Show Plots"
drawTester = input.bool(false, "Draw Tester", group = groupTitleShowPlots)
showADXVMAPlot = input(defval=false, title="Show ADXVMA Plot", group = groupTitleShowPlots)
showEntryLevelPlot = input(defval=false, title="Show Entry Level Plot", group = groupTitleShowPlots)
showTPLevelPlot = input(false, title="Show TP Level Plot", group = groupTitleShowPlots)
showMS  = input(true, "Show Structures", group = groupTitleShowPlots)

//-----------------------------------------------------------------------------}
//define boost pullback filter
var bool boost_pullback_long = na
var bool boost_pullback_short = na

// for boost long
if boost_pullback_bars == 1
    boost_pullback_long := close[0] < close[1]
else if boost_pullback_bars == 2
    boost_pullback_long := close[0] < close[1] and close[1] < close[2]
else if boost_pullback_bars == 3
    boost_pullback_long := close[0] < close[1] and close[1] < close[2] and close[2] < close[3]

// for boost short
if boost_pullback_bars == 1
    boost_pullback_short := close[0] > close[1]
else if boost_pullback_bars == 2
    boost_pullback_short := close[0] > close[1] and close[1] > close[2]
else if boost_pullback_bars == 3
    boost_pullback_short := close[0] > close[1] and close[1] > close[2] and close[2] > close[3]
//-----------------------------------------------------------------------------}

//------------- DETERMINE CURRENCY CONVERSION RATE ------------- { //
// Import ZenLibrary
import ZenAndTheArtOfTrading/ZenLibrary/5 as zen
// Custom function for converting units into lot sizes
unitsToLots(units) =>
    float lots = units / 100000
    lots := math.round(lots, 2)
    _return = lots * 100000
// Check if our account currency is the same as the base or quote currency or neither (for risk $ conversion purposes)
accountSameAsCounterCurrency = strategy.account_currency == syminfo.currency
accountSameAsBaseCurrency = strategy.account_currency == syminfo.basecurrency
accountNeitherCurrency = not accountSameAsCounterCurrency and not accountSameAsBaseCurrency
// Get currency conversion rates if applicable
conversionCurrencyPair = accountSameAsCounterCurrency ? syminfo.tickerid : strategy.account_currency + syminfo.currency
conversionCurrencyRate = accountSameAsBaseCurrency or accountNeitherCurrency ? request.security(conversionCurrencyPair, "D", close, ignore_invalid_symbol=true) : 1.0
// Display the current conversion currency ticker (for debug purposes)
if barstate.islastconfirmedhistory
    table t = table.new(position.top_right, 1, 2, color.black)
    table.cell(t, 0, 0, "Conversion: " + conversionCurrencyPair + " (" + str.tostring(conversionCurrencyRate) + ")", text_color=color.white, text_size=size.small)
    table.cell(t, 0, 1, "Account: $" + str.tostring(zen.truncate(strategy.equity)), text_color=color.white, text_size=size.small)

positionSize = Lots * 100000  // Convert lots to units
lotSize = unitsToLots(positionSize)
//------------- END CURRENCY CONVERSION RATE CODE ------------- }//


//-----------------------------------------------------------------------------}
// Backtesting date range
FromYear = input(2020, "From Year")
FromMonth = input(1, "From Month")
FromDay = input(1, "From Day")
ToYear = input(2025, "To Year")
ToMonth = input(12, "To Month")
ToDay = input(31, "To Day")

start = timestamp(FromYear, FromMonth, FromDay, 00, 00) // Start of the period
end = timestamp(ToYear, ToMonth, ToDay, 23, 59) // End of the period

// Check if the current bar is in the defined date range
inDateRange = time >= start and time <= end
// end backtesting date range
//-----------------------------------------------------------------------------}


//------------------------------------------------------------------------------
//Structure Settings
//-----------------------------------------------------------------------------{
groupTitleStructureSettings = "Structure Settings"
MSlength  = input(5, 'Pivot Lookback', group = groupTitleStructureSettings)
incr    = input.float(80, 'Increment Factor %', minval = 0, group = groupTitleStructureSettings)

resetOn = 'CHoCH'

//-----------------------------------------------------------------------------}
// Structure
//Style
bullCss    = color.rgb(7, 232, 187, 34)
bearCss    = color.rgb(250, 36, 214, 37)
retCss     = #ffbb00
areaTransp = 90

//------------------------------------------------------------------------------
//Global variables
//-----------------------------------------------------------------------------{
var float ph_y = na , var int ph_x = na
var float pl_y = na , var int pl_x = na
var float top = na  , var float btm = na
var ph_cross = false, var pl_cross = false

var float max = na
var float min = na
var float ts = na

var os = 0
ms = 0

//------------------------------------------------------------------------------
//Detect pivots and get coordinates
//-----------------------------------------------------------------------------{
n = bar_index
ph = ta.pivothigh(MSlength, MSlength)
pl = ta.pivotlow(MSlength, MSlength)

if ph 
    ph_y := ph
    ph_x := n - MSlength
    ph_cross := false

if pl 
    pl_y := pl
    pl_x := n - MSlength
    pl_cross := false

//-----------------------------------------------------------------------------}
//Bullish structures
//-----------------------------------------------------------------------------{
if close > ph_y and not ph_cross
    if resetOn == 'CHoCH'
        ms := os == -1 ? 1 : 0
    else
        ms := 1

    ph_cross := true

    //Highilight bullish MS
    if showMS
        line.new(ph_x, ph_y, n, ph_y
          , color = bullCss
          , style = os == -1 ? line.style_dashed : line.style_dotted)

    os := 1

    //Search for local minima
    btm := low
    for i = 0 to (n - ph_x)-1
        btm := math.min(low[i], btm)

    osChange = os != os[1]

//-----------------------------------------------------------------------------}
//Bearish structures
//-----------------------------------------------------------------------------{
if close < pl_y and not pl_cross
    if resetOn == 'CHoCH'
        ms := os == 1 ? -1 : 0
    else
        ms := -1

    pl_cross := true

    //Highilight bearish MS
    if showMS
        line.new(pl_x, pl_y, n, pl_y
          , color = bearCss
          , style = os == 1 ? line.style_dashed : line.style_dotted)

    os := -1

    //Search for local maxima
    top := high
    for i = 0 to (n - pl_x)-1
        top := math.max(high[i], top)

    osChange = os != os[1]

    // Open short position (close long if any)
    // if os == -1 and osChange and inDateRange and not(hour(time) == 0 and minute(time) < 59) 
    //     _string_close_long = ID + ',closelong,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"'
    //     strategy.close("Long Position", alert_message=_string_close_long)
    //     _string_short = ID + ',short,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"'
    //     strategy.entry("Short Position", strategy.short, alert_message=_string_short)

//-----------------------------------------------------------------------------}
//Trailing stop
//-----------------------------------------------------------------------------{
//Trailing max/min
if ms == 1
    max := close
else if ms == -1
    min := close
else
    max := math.max(close, max)
    min := math.min(close, min)

//Trailing stop
ts := ms == 1 ? btm
  : ms == -1 ? top
  : os == 1 ? ts + (max - max[1]) * incr / 100
  : ts + (min - min[1]) * incr / 100

//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
css = ms ? na 
  : os == 1 ? bullCss
  : bearCss

plot_price = plot(close, editable = false, display = display.none)
plot_ts    = plot(ts, 'Trailing Stop', color = css)

css_area = (close - ts) * os < 0 ? retCss
  : css

fill(plot_price, plot_ts, color.new(css_area, areaTransp))

// trend change plots
osChange = os != os[1]

trendUp = os == 1 and osChange
trendDown = os == -1 and osChange

trendingUp = os == 1
trendingDown = os == -1
// end structure
//-----------------------------------------------------------------------------}



//-----------------------------------------------------------------------------}
// Begin ADXVNA

ups = 0.0
downs = 0.0
index = 0.0
adxvma = 0.0
trend = 0
up = 0.0
down = 0.0

k = 1.0 / adxvma_period

volatility = ta.atr(200)

currentUp = math.max(close[0] - close[1], 0)
currentDown = math.max(close[1] - close[0], 0)

up := (1 - k) * nz(up[1]) + k * currentUp[0]
down := (1 - k) * nz(down[1]) + k * currentDown[0]

sum = up[0] + down[0]

fractionUp = 0.0
fractionDown = 0.0

if sum > 0.0
    fractionUp := up[0] / sum
    fractionDown := down[0] / sum
    fractionDown

ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

normDiff = math.abs(ups[0] - downs[0])
normSum = ups[0] + downs[0]


normFraction = if normSum > 0.0
    normDiff / normSum

index := (1 - k) * nz(index[1]) + k * normFraction
ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

epsilon = 0.1 * nz(volatility[1])
hhp = ta.highest(index, adxvma_period)[1]
llp = ta.lowest(index, adxvma_period)[1]

hhv = math.max(index[0], hhp)
llv = math.min(index[0], llp)

vIndex = 0.0

if hhv - llv > 0.0
    vIndex := (index[0] - llv) / (hhv - llv)
    vIndex

adxvma := (1 - k * vIndex) * nz(adxvma[1]) + k * vIndex * close[0]

lcolor = color.lime

if nz(trend[1]) > -1 and adxvma[0] > nz(adxvma[1])
    trend := 1
    lcolor = color.black
    lcolor
else
    if nz(trend[1]) < 1 and adxvma[0] < nz(adxvma[1])
        trend := -1
        lcolor := color.red
        lcolor
    else
        trend := 0
        lcolor := color.yellow
        lcolor

not_flat = trend != 0
// End ADXVMA
//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------}
// donchian trend filter
dchannel(d_len) =>
    float d_hh = ta.highest(d_len)
    float d_ll = ta.lowest(d_len)

    int d_trend = 0
    d_trend := close > d_hh[1] ? 1 : close < d_ll[1] ? -1 : nz(d_trend[1])
    d_trend

dchannelalt(d_len, d_maintrend) =>
    float d_hh = ta.highest(d_len)
    float d_ll = ta.lowest(d_len)

    int d_trend = 0
    d_trend := close > d_hh[1] ? 1 : close < d_ll[1] ? -1 : nz(d_trend[1])
    d_maintrend == 1 ? d_trend == 1 ? #00FF00ff : #00FF009f : d_maintrend == -1 ? d_trend == -1 ? #FF0000ff : #FF00009f : na

d_maintrend = dchannel(dlen)

dtrendUp = d_maintrend == 1
dtrendDown = d_maintrend == -1

// plot(5, color=dchannelalt(dlen - 0, maintrend), style=plot.style_columns, histbase=0)
// plot(10, color=dchannelalt(dlen - 1, maintrend), style=plot.style_columns, histbase=5)
// plot(15, color=dchannelalt(dlen - 2, maintrend), style=plot.style_columns, histbase=10)
// plot(20, color=dchannelalt(dlen - 3, maintrend), style=plot.style_columns, histbase=15)
// plot(25, color=dchannelalt(dlen - 4, maintrend), style=plot.style_columns, histbase=20)
// plot(30, color=dchannelalt(dlen - 5, maintrend), style=plot.style_columns, histbase=25)
// plot(35, color=dchannelalt(dlen - 6, maintrend), style=plot.style_columns, histbase=30)
// plot(40, color=dchannelalt(dlen - 7, maintrend), style=plot.style_columns, histbase=35)
// plot(45, color=dchannelalt(dlen - 8, maintrend), style=plot.style_columns, histbase=40)
// plot(50, color=dchannelalt(dlen - 9, maintrend), style=plot.style_columns, histbase=45)

// End donchian trend filter
//-----------------------------------------------------------------------------}



//-----------------------------------------------------------------------------}
///Strategy Entry and Exit
// Define your entry price variable
var float entryPrice = na

if (strategy.position_size != 0)
    entryPrice := strategy.position_avg_price


// Close short 
if trendUp and inDateRange and not(hour(time) == 0 and minute(time) < 59) 
    _string_close_short = AlertType == "Pineconnector" ? (ID + ',closeshort,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"') : ('type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"')
    strategy.close_all("Close S", alert_message=_string_close_short)
    entryPrice := na

// Open long
if trendUp and inDateRange and not(hour(time) == 0 and minute(time) < 59) and (flat_filter ? not_flat : true) and (dtrend_filter ? dtrendUp : true)
    _string_long = AlertType == "Pineconnector" ? (ID + ',long,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"') : ('type=order,order-type=long,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '",entry=true')
    strategy.entry("Entry L", strategy.long, qty=lotSize, alert_message=_string_long)
    entryPrice := strategy.position_avg_price

// Close long 
if trendDown and inDateRange and not(hour(time) == 0 and minute(time) < 59) 
    _string_close_long = AlertType == "Pineconnector" ? (ID + ',closelong,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"') : ('type=order,order-type=closelong,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"')
    strategy.close_all("Close L", alert_message=_string_close_long)
    entryPrice := na

// Open short position
if trendDown and inDateRange and not(hour(time) == 0 and minute(time) < 59) and (flat_filter ? not_flat : true) and (dtrend_filter ? dtrendDown : true)
    _string_short = AlertType == "Pineconnector" ? (ID + ',short,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"') : ('type=order,order-type=short,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"')
    strategy.entry("Entry S", strategy.short, qty=lotSize, alert_message=_string_short)
    entryPrice := strategy.position_avg_price

//-----------------------------------------------------------------------------}
// handle after close time
var bool firstBarAfterClosedTime = na
var bool trendChangeDuringClosedTimeLong = na
var bool trendChangeDuringClosedTimeShort = na

// Check if a trend change happens during the closed time
if (hour(time) == 0 and minute(time) < 59)
    if trendingUp and nz(trend[1]) < 1
        trendChangeDuringClosedTimeLong := true
    if trendingDown and nz(trend[1]) > -1
        trendChangeDuringClosedTimeShort := true

    // Check if the current time is within the 5-minute window from 1:00 to 1:05
    if (hour(time) == 1 and minute(time) < 5)
        if trendingUp and trendChangeDuringClosedTimeLong and inDateRange and strategy.position_size <= 0
            // Close all short positions
            _string_close_short = AlertType == "Pineconnector" ? (ID + ',closeshort,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"') : ('type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"')
            strategy.close_all("Close S", alert_message=_string_close_short)
            // Enter long position
            _string_long = AlertType == "Pineconnector" ? (ID + ',long,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"') : ('type=order,order-type=long,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '",entry=true')
            strategy.entry("Entry L", strategy.long, alert_message=_string_long)
            entryPrice := strategy.position_avg_price

        if trendingDown and trendChangeDuringClosedTimeShort and inDateRange and strategy.position_size >= 0
            // Close all long positions
            _string_close_long = AlertType == "Pineconnector" ? (ID + ',closelong,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"') : ('type=order,order-type=closelong,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"')
            strategy.close_all("Close L", alert_message=_string_close_long)
            // Enter short position
            _string_short = AlertType == "Pineconnector" ? (ID + ',short,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"') : ('type=order,order-type=short,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '",entry=true')
            strategy.entry("Entry S", strategy.short, qty=lotSize, alert_message=_string_short)
            entryPrice := strategy.position_avg_price

    // Reset the variables
    trendChangeDuringClosedTimeLong := false
    trendChangeDuringClosedTimeShort := false
//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------}
// Boost Entries
// Open additional long position
if boostEntries and trendingUp and not na(entryPrice) and ((close - entryPrice) / entryPrice) >= percentChangeCriteria / 100 and strategy.position_size > 0 and (boost_pullback_filter ? boost_pullback_long : true)
    _string_boost_long = AlertType == "Pineconnector" ? (ID + ',long,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"') : ('type=order,order-type=long,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '",entry=false')
    strategy.entry("Boost L", strategy.long, qty=lotSize, alert_message=_string_boost_long)

// Open additional short position
if boostEntries and trendingDown and not na(entryPrice) and ((entryPrice - close) / entryPrice) >= percentChangeCriteria / 100 and strategy.position_size < 0 and (boost_pullback_filter ? boost_pullback_short : true)
    _string_boost_short = AlertType == "Pineconnector" ? (ID + ',short,' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '"') : ('type=order,order-type=short,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(Lots) + ',comment="' + Comment + '",entry=false')
    strategy.entry("Boost S", strategy.short, qty=lotSize, alert_message=_string_boost_short)

// end boost entries
//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------}
// optional TP
if useTP
    // Calculate take profit price for long position
    tpPriceLong = entryPrice * (1 + tpPercent / 100)

    // Check if the price has reached the take profit level
    if (high >= tpPriceLong)
        _string_tp_long = AlertType == "Pineconnector" ? (ID + ',tplong,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"') : ('type=order,order-type=tplong,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"')
        strategy.close_all("TP L", alert_message=_string_tp_long)

    // Calculate take profit price for short position
    tpPriceShort = entryPrice * (1 - tpPercent / 100)

    // Check if the price has reached the take profit level
    if (low <= tpPriceShort)
        _string_tp_short = AlertType == "Pineconnector" ? (ID + ',tpshort,' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"') : ('type=order,order-type=tpshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + Comment + '"')
        strategy.close_all("TP S", alert_message=_string_tp_short)

tpPriceLong = entryPrice * (1 + tpPercent / 100)
tpPriceShort = entryPrice * (1 - tpPercent / 100)
// end optional TP
//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------}
// Stats
// Declare performance tracking variables
var balance = strategy.initial_capital
var drawdown = 0.0
var maxDrawdown = 0.0
var maxBalance = 0.0
var totalWins = 0
var totalLoss = 0

// avgPct Gain/Loss
// Strategy calls to create single short and long trades
// if bar_index == last_bar_index - 15
//     strategy.entry("Long Entry",  strategy.long)
// else if bar_index == last_bar_index - 10
//     strategy.close("Long Entry")
//     strategy.entry("Short", strategy.short)
// else if bar_index == last_bar_index - 5
//     strategy.close("Short")

// // Calculate price % change for all closed trades.
// var bool[] isLong = array.new_bool(0)
// pricePctChangeWin = 0.0
// pricePctChangeLoss = 0.0
// winTrades = 0.0
// lossTrades = 0.0

// if (strategy.position_size > 0)
//     array.push(isLong, true)
// else if (strategy.position_size < 0)
//     array.push(isLong, false)

// for tradeNo = 0 to strategy.closedtrades - 1
//     entryP = strategy.closedtrades.entry_price(tradeNo)
//     exitP = strategy.closedtrades.exit_price(tradeNo)
//     pricePctChange = (exitP - entryP) / entryP * 100
//     isLastTradeLong = array.get(isLong, tradeNo)
//     if (isLastTradeLong and pricePctChange > 0) or (not isLastTradeLong and pricePctChange < 0)
//         pricePctChangeWin += pricePctChange
//         winTrades += 1
//     else
//         pricePctChangeLoss += pricePctChange
//         lossTrades += 1

// avgPricePctChangeWin = nz(pricePctChangeWin / winTrades)
// avgPricePctChangeLoss = nz(pricePctChangeLoss / lossTrades)

// Prepare stats table
var table testTable = table.new(position.bottom_left, 6, 2, border_width=1)
f_fillCell(_table, _column, _row, _title, _value, _bgcolor, _txtcolor) =>
    _cellText = _title + "\n" + _value
    table.cell(_table, _column, _row, _cellText, bgcolor=_bgcolor, text_color=_txtcolor)
    
// Custom function to truncate (cut) excess decimal places
truncate(_number, _decimalPlaces) =>
    _factor = math.pow(10, _decimalPlaces)
    int(_number * _factor) / _factor
// end stats table
//-----------------------------------------------------------------------------}
    



//-----------------------------------------------------------------------------}

// draw plots
plot(showEntryLevelPlot ? entryPrice : na, "Entry Price", color=color.rgb(170, 170, 170, 47))
plot(showTPLevelPlot ? tpPriceLong : na, "TP Long", color=color.rgb(111, 255, 0, 65))
plot(showTPLevelPlot ? tpPriceShort : na, "TP Short", color=color.rgb(255, 0, 225, 47))
plot(showADXVMAPlot ? adxvma : na, color=color.new(lcolor, 0), linewidth=2)

plotshape(series=trendUp, title="Up Trend", location=location.belowbar, color=color.rgb(57, 245, 176), style=shape.triangleup, size=size.tiny)
plotshape(series=trendDown, title="Down Trend", location=location.abovebar, color=color.rgb(240, 47, 254), style=shape.triangledown, size=size.tiny)

// Draw stats table
var bgcolor = color.new(color.black,0)
if drawTester
    if barstate.islastconfirmedhistory
        // Update table
        dollarReturn = strategy.netprofit
        f_fillCell(testTable, 0, 0, "Total Trades:", str.tostring(strategy.closedtrades), bgcolor, color.white)
        f_fillCell(testTable, 0, 1, "Win Rate:", str.tostring(truncate((strategy.wintrades/strategy.closedtrades)*100,2)) + "%", bgcolor, color.white)
        f_fillCell(testTable, 1, 0, "Starting:", "$" + str.tostring(strategy.initial_capital), bgcolor, color.white)
        f_fillCell(testTable, 1, 1, "Ending:", "$" + str.tostring(truncate(strategy.initial_capital + strategy.netprofit,2)), bgcolor, color.white)
        f_fillCell(testTable, 2, 0, "Avg Win:", "$"+ str.tostring(truncate(strategy.grossprofit / strategy.wintrades, 2)), bgcolor, color.white)
        f_fillCell(testTable, 2, 1, "Avg Loss:", "$"+ str.tostring(truncate(strategy.grossloss / strategy.losstrades, 2)), bgcolor, color.white)
        f_fillCell(testTable, 3, 0, "Profit Factor:", str.tostring(truncate(strategy.grossprofit / strategy.grossloss,2)), strategy.grossprofit > strategy.grossloss ? color.green : color.red, color.white)
        f_fillCell(testTable, 3, 1, "Max Runup:",  str.tostring(truncate(strategy.max_runup, 2 )), bgcolor, color.white)
        f_fillCell(testTable, 4, 0, "Return:", (dollarReturn > 0 ? "+" : "") + str.tostring(truncate((dollarReturn / strategy.initial_capital)*100,2)) + "%", dollarReturn > 0 ? color.green : color.red, color.white)
        f_fillCell(testTable, 4, 1, "Max DD:", str.tostring(truncate((strategy.max_drawdown / strategy.equity) * 100 ,2)) + "%", color.red, color.white)
        // f_fillCell(testTable, 5, 0, "Avg Price % Change (Wins):", str.tostring(truncate(avgPricePctChangeWin,3)) + "%", bgcolor, color.white)
        // f_fillCell(testTable, 5, 1, "Avg Price % Change (Losses):", str.tostring(truncate(avgPricePctChangeLoss,3)) + "%", bgcolor, color.white)
// --- END TESTER CODE --- ///////////////