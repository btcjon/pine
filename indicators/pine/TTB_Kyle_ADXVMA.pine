//@version=5
indicator("TTB kyle ADXVMA", overlay=true, precision=0, explicit_plot_zorder=true, max_labels_count=500)
// Get user input
sensitivity = input.float(2.8, "  Sensitivity (0.5 - 10)", 0.5, 10, step=0.1)
emaEnergy   = input.bool(true, "EMA Energy")
keltner_length = input(10, "Keltner Channel Length")
atrPeriod = input(10, "ATR Length")
factor = input.float(3.5, "Factor", step = 0.01)
// Keltner Channel function
keltner_channel(src, length) =>
    ma = ta.sma(src, length)
    rangec = high - low
    upper = ma + rangec
    lower = ma - rangec
    [upper, lower]

// Modified Supertrend function using Keltner Channel
supertrend(_src, factor, atrLen, kel_length) =>
    [upperKeltner, lowerKeltner] = keltner_channel(_src, kel_length)
    rangec = upperKeltner - lowerKeltner
    upperBand = _src + factor * rangec
    lowerBand = _src - factor * rangec
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])
    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int direction = na
    float superTrend = na
    prevSuperTrend = superTrend[1]

    if na(rangec[1])
        direction := 1
    else if prevSuperTrend == prevUpperBand
        direction := close > upperBand ? -1 : 1
    else
        direction := close < lowerBand ? 1 : -1
    superTrend := direction == -1 ? lowerBand : upperBand
    [superTrend, direction]
// Get Components
ema1        = ta.ema(high,  9)
ema2        = ta.ema(high, 12)
ema3        = ta.ema(high, 15)
ema4        = ta.ema(high, 18)
ema5        = ta.ema(high, 21)
ema6        = ta.ema(high, 24)
ema7        = ta.ema(high, 27)
ema8        = ta.ema(high, 30)
ema9        = ta.ema(high, 33)
ema10        = ta.ema(high, 36)
ema11        = ta.ema(high, 39)
ema12       = ta.ema(high, 42)
ema13       = ta.ema(high, 45)
ema14        = ta.ema(high, 48)
ema15        = ta.ema(high, 51)
// Colors
green       = #2BBC4D, red     = #C51D0B
emaEnergyColor(ma) => emaEnergy ? (close >= ma ? green : red) : na
// Plots
// plot(ema1, "", emaEnergyColor(ema1), editable=false)
// plot(ema2, "", emaEnergyColor(ema2), editable=false)
// plot(ema3, "", emaEnergyColor(ema3), editable=false)
// plot(ema4, "", emaEnergyColor(ema4), editable=false)
// plot(ema5, "", emaEnergyColor(ema5), editable=false)
// plot(ema6, "", emaEnergyColor(ema6), editable=false)
// plot(ema7, "", emaEnergyColor(ema7), editable=false)
// plot(ema8, "", emaEnergyColor(ema8), editable=false)
// plot(ema9, "", emaEnergyColor(ema9), editable=false)
// plot(ema10, "", emaEnergyColor(ema10), editable=false)
// plot(ema11, "", emaEnergyColor(ema11), editable=false)
// plot(ema12, "", emaEnergyColor(ema12), editable=false)
// plot(ema13, "", emaEnergyColor(ema13), editable=false)
// plot(ema14, "", emaEnergyColor(ema14), editable=false)
// plot(ema15, "", emaEnergyColor(ema15), editable=false)
[supertrend, direction] = supertrend(close, sensitivity, 11, keltner_length)
bull = ta.crossover(close, supertrend)
bear = ta.crossunder(close, supertrend)
y1 = low - (ta.atr(30) * 2)
y2 = high + (ta.atr(30) * 2)
//buy  = bull ? label.new(bar_index, y1, "BUY", xloc.bar_index, yloc.price, green, label.style_label_up, color.white, size.normal) : na
//sell = bear ? label.new(bar_index, y2, "SELL", xloc.bar_index, yloc.price, red, label.style_label_down, color.white, size.normal) : na
[supertrends, directions] = ta.supertrend(factor, atrPeriod)
bodyMiddle = plot((open + close) / 2, display=display.none)
// Trend Catcher Indicator (Example)
ema100 = ta.ema(close, 10)
ema200 = ta.ema(close, 20)
trendCatcher = ta.crossover(ema100, ema200) ? 1 : ta.crossunder(ema100, ema200) ? -1 : 0
trendColor = trendCatcher == 1 ? color.rgb(90, 23, 102) : na
barcolor(trendColor)
// Colored candles
barcolor(color = close > supertrends ? color.rgb(102, 255, 0) : color.rgb(255, 0, 0))
// 添加警報條件
alertcondition(bull, title="Buy", message="Buy!")
alertcondition(bear, title="Sell", message="Sell!")




// adxvma
adxvma_period = input.int(9, minval=1)

ups = 0.0
downs = 0.0
index = 0.0
adxvma = 0.0
trend = 0
up = 0.0
down = 0.0

k = 1.0 / adxvma_period

volatility = ta.atr(200)

currentUp = math.max(close[0] - close[1], 0)
currentDown = math.max(close[1] - close[0], 0)

up := (1 - k) * nz(up[1]) + k * currentUp[0]
down := (1 - k) * nz(down[1]) + k * currentDown[0]

sum = up[0] + down[0]

fractionUp = 0.0
fractionDown = 0.0

if sum > 0.0
    fractionUp := up[0] / sum
    fractionDown := down[0] / sum
    fractionDown

ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

normDiff = math.abs(ups[0] - downs[0])
normSum = ups[0] + downs[0]


normFraction = if normSum > 0.0
    normDiff / normSum

index := (1 - k) * nz(index[1]) + k * normFraction
ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

epsilon = 0.1 * nz(volatility[1])
hhp = ta.highest(index, adxvma_period)[1]
llp = ta.lowest(index, adxvma_period)[1]

hhv = math.max(index[0], hhp)
llv = math.min(index[0], llp)

vIndex = 0.0

if hhv - llv > 0.0
    vIndex := (index[0] - llv) / (hhv - llv)
    vIndex

adxvma := (1 - k * vIndex) * nz(adxvma[1]) + k * vIndex * close[0]

lcolor = color.lime

if nz(trend[1]) > -1 and adxvma[0] > nz(adxvma[1])
    trend := 1
    lcolor = color.black
    lcolor
else
    if nz(trend[1]) < 1 and adxvma[0] < nz(adxvma[1])
        trend := -1
        lcolor := color.red
        lcolor
    else
        trend := 0
        lcolor := color.yellow
        lcolor

plot(adxvma, color=color.new(lcolor, 0), linewidth=3)
// end adxvma

// my plots
buyCondition = bull and trend == 1
sellCondition = bear and trend == -1

// Create a single plot that outputs 1 for buys and -1 for sells
signal = buyCondition ? 1 : sellCondition ? -1 : na
plot(signal, "Buy/Sell Signal", color=color.blue)


plotshape(series=buyCondition, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY")
plotshape(series=sellCondition, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL")




