//@version=5
indicator(title='TTB Trend Chop', shorttitle='TTB Trend Chop', overlay=true)

// adxvma
adxvma_period = input.int(28, minval=1)

ups = 0.0
downs = 0.0
index = 0.0
adxvma = 0.0
trend = 0
up = 0.0
down = 0.0

k = 1.0 / adxvma_period

volatility = ta.atr(200)

currentUp = math.max(close[0] - close[1], 0)
currentDown = math.max(close[1] - close[0], 0)

up := (1 - k) * nz(up[1]) + k * currentUp[0]
down := (1 - k) * nz(down[1]) + k * currentDown[0]

sum = up[0] + down[0]

fractionUp = 0.0
fractionDown = 0.0

if sum > 0.0
    fractionUp := up[0] / sum
    fractionDown := down[0] / sum
    fractionDown

ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

normDiff = math.abs(ups[0] - downs[0])
normSum = ups[0] + downs[0]


normFraction = if normSum > 0.0
    normDiff / normSum

index := (1 - k) * nz(index[1]) + k * normFraction
ups := (1 - k) * nz(ups[1]) + k * fractionUp
downs := (1 - k) * nz(downs[1]) + k * fractionDown

epsilon = 0.1 * nz(volatility[1])
hhp = ta.highest(index, adxvma_period)[1]
llp = ta.lowest(index, adxvma_period)[1]

hhv = math.max(index[0], hhp)
llv = math.min(index[0], llp)

vIndex = 0.0

if hhv - llv > 0.0
    vIndex := (index[0] - llv) / (hhv - llv)
    vIndex

adxvma := (1 - k * vIndex) * nz(adxvma[1]) + k * vIndex * close[0]

lcolor = color.lime

if nz(trend[1]) > -1 and adxvma[0] > nz(adxvma[1])
    trend := 1
    lcolor = color.black
else
    if nz(trend[1]) < 1 and adxvma[0] < nz(adxvma[1])
        trend := -1
        lcolor := color.red
    else
        trend := 0
        lcolor := color.yellow
// end adxvma


//squeeze index 
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
conv   = input(50, 'Convergence Factor')
length = input(20)
src = input(close)
thresh = input.int(75, "Threshold")

//Style
col_0 = input(#ffeb3b, 'Gradient'
  , inline = 'inline0'
  , group = 'Style')
  
col_1 = input(#ff5d00, ''
  , inline = 'inline0'
  , group = 'Style')
  
col_2 = input(#ff1100, ''
  , inline = 'inline0'
  , group = 'Style')

//-----------------------------------------------------------------------------}
//Squeeze index
//-----------------------------------------------------------------------------{
var max = 0.
var min = 0.

max := nz(math.max(src, max - (max - src) / conv), src)
min := nz(math.min(src, min + (src - min) / conv), src)
diff = math.log(max - min)

psi = -50 * ta.correlation(diff, bar_index, length) + 50
// end squeeze index


//plots

plot(adxvma, color=psi > thresh ? color.purple : color.new(lcolor, 0), linewidth=3)

plotshape(series=trend == 1 and trend[1] != 1, color=color.green, style=shape.triangleup, location=location.belowbar)
if (trend == 1 and trend[1] != 1 and barstate.isconfirmed)
    alert("up " + syminfo.ticker, alert.freq_once_per_bar)

plotshape(series=trend == -1 and trend[1] != -1, color=color.red, style=shape.triangledown, location=location.abovebar)
if (trend == -1 and trend[1] != -1 and barstate.isconfirmed)
    alert("down " + syminfo.ticker, alert.freq_once_per_bar)

plotshape(series=trend == 0 and trend[1] != 0, color=color.yellow, style=shape.circle, location=location.belowbar)
if (trend == 0 and trend[1] != 0 and barstate.isconfirmed)
    alert("flat " + syminfo.ticker, alert.freq_once_per_bar)

plotshape(series=ta.crossover(psi, thresh), color=color.purple, style=shape.triangleup, location=location.belowbar)
if (ta.crossover(psi, thresh) and barstate.isconfirmed)
    alert("flat " + syminfo.ticker, alert.freq_once_per_bar)

plotshape(series=ta.crossunder(psi, thresh), color=color.purple, style=shape.triangledown, location=location.abovebar)
//if (ta.crossunder(psi, thresh) and barstate.isconfirmed)
//    alert("PSI crossed below " + tostring(thresh) + " " + syminfo.ticker, alert.freq_once_per_bar)





// var color prevColor = na

// // Update the previous color at the same time as lcolor
// prevColor := lcolor

// // Alert conditions
// if barstate.isconfirmed and lcolor != nz(lcolor[1])
//     if lcolor == color.black
//         alert("flat " + syminfo.ticker, alert.freq_once_per_bar)
//     else if lcolor == color.red
//         alert("down " + syminfo.ticker, alert.freq_once_per_bar)
//     else if lcolor == color.yellow or lcolor == color.purple
//         alert("flat " + syminfo.ticker, alert.freq_once_per_bar)
//     else if lcolor == color.lime
//         alert("up " + syminfo.ticker, alert.freq_once_per_bar)
