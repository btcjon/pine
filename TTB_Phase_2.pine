//@version=5
strategy('TTB Phase 2L', overlay=true, initial_capital=1000000, default_qty_type=strategy.cash, default_qty_value=100000, currency=currency.USD, pyramiding=999, calc_on_every_tick=false, max_bars_back=4900)

import thetradingbot/ttbcolors/1 as TTBColors

source_type = input.string('Close', 'Source', options=['Close', 'Open', 'High', 'Low', 'HL2', 'HLC3', 'OHLC4', 'Median Body', 'Weighted Close', 'Trend Biased', 'Trend Biased Extreme'])
direction = input.string(defval='Long', title='Trading Direction', options=['All', 'Long', 'Short'])

source_function(type) =>
    if type == 'Close'
        close
    else if type == 'Open'
        open
    else if type == 'High'
        high
    else if type == 'Low'
        low
    else if type == 'HL2'
        hl2
    else if type == 'HL3'
        hlc3
    else if type == 'OHLC4'
        ohlc4
    else if type == 'Median Body'
        (open + close) / 2
    else if type == 'Weighted Close'
        (high + low + 2 * close) / 4
    else if type == 'Trend Biased'
        close > open ? (high + close) / 2 : (low + close) / 2
    else if type == 'Trend Biased Extreme'
        close > open ? high : low

truncate(number, decimals) =>
    factor = math.pow(10, decimals)
    int(number * factor) / factor

var long = false
var short = true

if direction == 'All'
    long := true
    short := true
    short
else if direction == 'Long'
    long := true
    short := false
    short
else if direction == 'Short'
    long := false
    short := true
    short

// Strategy Inputs
ID = input(defval='6700960415957', title='ID')
version = input(defval='Phase 2', title='version')
test = input(defval='1', title='test')
safe_order_step_scale_Multiplier = input(1, title="Safe Order Step Scale Multiplier")

current_position_size_lots = input.float(5.0, "Current Position Size (Lots)")
avg_entry_price = input(1.0, "Average Entry Price")
waitBars = input(100, title="Number of Bars to Wait After Entry for SO")
SO_Size_Factor = input(1.0, "SO Size Factor")

groupTitleLongInputs = "Long Inputs"
price_deviation = input.float(0.04, title='Price deviation to open safety orders (%)', step=0.1, minval=0.0) / 100
take_profit = input.float(0.1, title='Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_order_lots = current_position_size_lots
safe_order_lots = current_position_size_lots * SO_Size_Factor
safe_order_volume_scale = input.float(1, step=0.1, title='Safety order volume scale')
safe_order_step_scale = input.float(1, step=0.1, title='Safety order step scale')
max_safe_order = input(3, title='max no. of safe orders')

groupTitleShortInputs = "Short Inputs"
price_S_deviation = input.float(0.04, title='Price deviation to open short safety orders (%)', step=0.1, minval=0.0) / 100
take_S_profit = input.float(0.1, title='Short Target Take Profit (%)', step=0.1, minval=0.0) / 100
base_S_order_lots = current_position_size_lots
safe_S_order_lots = current_position_size_lots * SO_Size_Factor
safe_S_order_volume_scale = input.float(1, step=0.1, title='Safety sell order volume scale')
safe_S_order_step_scale = input.float(1, step=0.1, title='Safety sell order step scale')
max_S_safe_order = input(3, title='max no. of sell safe orders')

//------------- DETERMINE CURRENCY CONVERSION RATE ------------- { //
// Import ZenLibrary
import ZenAndTheArtOfTrading/ZenLibrary/5 as zen
// Custom function for converting units into lot sizes
unitsToLots(units) =>
    float lots = units / 100000
    lots := math.round(lots, 2)
    _return = lots * 100000
// Check if our account currency is the same as the base or quote currency or neither (for risk $ conversion purposes)
accountSameAsCounterCurrency = strategy.account_currency == syminfo.currency
accountSameAsBaseCurrency = strategy.account_currency == syminfo.basecurrency
accountNeitherCurrency = not accountSameAsCounterCurrency and not accountSameAsBaseCurrency
// Get currency conversion rates if applicable
conversionCurrencyPair = accountSameAsCounterCurrency ? syminfo.tickerid : strategy.account_currency + syminfo.currency
conversionCurrencyRate = accountSameAsBaseCurrency or accountNeitherCurrency ? request.security(conversionCurrencyPair, "D", close, ignore_invalid_symbol=true) : 1.0
// Display the current conversion currency ticker (for debug purposes)
if barstate.islastconfirmedhistory
    table t = table.new(position.top_right, 1, 2, color.black)
    table.cell(t, 0, 0, "Conversion: " + conversionCurrencyPair + " (" + str.tostring(conversionCurrencyRate) + ")", text_color=color.white, text_size=size.small)
    table.cell(t, 0, 1, "Account: $" + str.tostring(zen.truncate(strategy.equity)), text_color=color.white, text_size=size.small)

base_order = base_order_lots * 100000
safe_order = safe_order_lots * 100000
base_S_order = base_S_order_lots * 100000
safe_S_order = safe_S_order_lots * 100000

//current_position_size = current_position_size_lots * 100000

//------------- END CURRENCY CONVERSION RATE CODE ------------- }//

//-----------------------------------------------------------------------------}
// Structure
groupTitleStructureSettings = "Structure Settings"
MSlength  = input(10, 'Pivot Lookback', group = groupTitleStructureSettings)
incr    = input.float(95, 'Increment Factor %', minval = 0, group = groupTitleStructureSettings)
StrucTF1 = input(title="StrucTF1", defval="60", group = groupTitleStructureSettings)
showMS  = input(false, "Show Structures", group = groupTitleStructureSettings)
showStrucPlots  = input(true, "Show Struc Plots", group = groupTitleStructureSettings)

resetOn = 'CHoCH'

//Style 
bullCss    = color.rgb(7, 232, 187, 34)
bearCss    = color.rgb(250, 36, 214, 37)
retCss     = #ffbb00
areaTransp = 90

//------------------------------------------------------------------------------
//Global variables
var float ph_y = na , var int ph_x = na
var float pl_y = na , var int pl_x = na
var float top = na  , var float btm = na
var ph_cross = false, var pl_cross = false

var float max = na
var float min = na
var float ts = na

var os = 0
ms = 0

//------------------------------------------------------------------------------
//Detect pivots and get coordinates
n = bar_index
ph = ta.pivothigh(MSlength, MSlength)
pl = ta.pivotlow(MSlength, MSlength)

if ph > 0
    ph_y := ph
    ph_x := n - MSlength
    ph_cross := false

if pl > 0
    pl_y := pl
    pl_x := n - MSlength
    pl_cross := false


//-----------------------------------------------------------------------------}
//Bullish structures
if close > ph_y and not ph_cross
    if resetOn == 'CHoCH'
        ms := os == -1 ? 1 : 0
    else
        ms := 1

    ph_cross := true

    //Highilight bullish MS
    if showMS
        line.new(ph_x, ph_y, n, ph_y
          , color = bullCss
          , style = os == -1 ? line.style_dashed : line.style_dotted)

    os := 1

    //Search for local minima
    btm := low
    for i = 0 to (n - ph_x)-1
        btm := math.min(low[i], btm)

    osChange = os != os[1]

//-----------------------------------------------------------------------------}
//Bearish structures
if close < pl_y and not pl_cross
    if resetOn == 'CHoCH'
        ms := os == 1 ? -1 : 0
    else
        ms := -1

    pl_cross := true

    //Highilight bearish MS
    if showMS
        line.new(pl_x, pl_y, n, pl_y
          , color = bearCss
          , style = os == 1 ? line.style_dashed : line.style_dotted)

    os := -1

    //Search for local maxima
    top := high
    for i = 0 to (n - pl_x)-1
        top := math.max(high[i], top)

    osChange = os != os[1]

//-----------------------------------------------------------------------------}
//Trailing stop
if ms == 1
    max := close
else if ms == -1
    min := close
else
    max := math.max(close, max)
    min := math.min(close, min)

ts := ms == 1 ? btm
  : ms == -1 ? top
  : os == 1 ? ts + (max - max[1]) * incr / 100
  : ts + (min - min[1]) * incr / 100

//-----------------------------------------------------------------------------}
//Plots
css = (ms > 0) ? na 
  : os == 1 ? bullCss
  : bearCss

plot_price = plot(showStrucPlots ? close : na, editable = false, display = display.none)
plot_ts    = plot(showStrucPlots ? ts : na, 'Trailing Stop', color = css)

css_area = (close - ts) * os < 0 ? retCss
  : css

//fill(plot_price, plot_ts, color.new(css_area, areaTransp))
fill(plot_price, plot_ts, color.new(showStrucPlots ? css_area : na, areaTransp))

// trend change plots
osChange = os != os[1]

trendUp = os == 1 and osChange
trendDown = os == -1 and osChange
trendingUp = os == 1
trendingDown = os == -1

stf1 = request.security(syminfo.tickerid, StrucTF1, os, lookahead=barmerge.lookahead_off)
trendingUp1H = stf1 == 1
trendingDown1H = stf1 == -1
// end structure
//-----------------------------------------------------------------------------}

// Date Ranges
show_table = input(true, title='Show table')
text_size_switch = true
from_month = input.int(defval=5, title='From Month', minval=1, maxval=12)
from_day = input.int(defval=1, title='From Day', minval=1, maxval=31)
from_year = input(defval=2021, title='From Year')
to_month = input.int(defval=12, title='To Month', minval=1, maxval=12)
to_day = input.int(defval=1, title='To Day', minval=1, maxval=31)
to_year = input(defval=2024, title='To Year')
start = timestamp(from_year, from_month, from_day, 00, 00)  // backtest start window
finish = timestamp(to_year, to_month, to_day, 23, 59)  // backtest finish window
window = time >= start and time <= finish ? true : false  // create function "within window of time"

// Initialize variables based on user inputs
var current_so = 0
var current_S_so = 0
var initial_order = 0.0
var initial_S_order = 0.0
var original_ttp_value = 0.0
var quantity = 0.0
var entry_price = 0.0
var firstBarTime = 0.0
var maxDiffDays = 0.0
var soCount = 0
var SO1 = 0
var SO2 = 0
var SO3 = 0
var SO4 = 0
var SO5 = 0
var SO6 = 0
var SO7 = 0
var noSO = 0
var initial_price = 0.0
var initial_S_price = 0.0
var price_drop = 0.0
var price_pump = 0.0
var max_drop = 0.0
var max_pump = 0.0
var pump_date = 0
var pump_month = 0
var drop_date = 0
var drop_month = 0
var longest_trade_day = 0
var longest_trade_month = 0
var take_profit_level = 0.0
var take_S_profit_level = 0.0
var tp_plot = 0.0
var tp_S_plot = 0.0
var threshold = 0.0
var S_threshold = 0.0
timeDiff = time - firstBarTime
maxDev = 0.0
maxSDev = 0.0
closedTrades = 0
var tradeCount = 0
var i = 0
var avg_price = 0.0
var total_funds_in_trade = 0.0
var total_qty_in_trade = 0.0
var capital = 100.0

// Variables to track entry and bars since entry
var barCountSinceEntry = 0
var entrySignal = false

// Turn that time difference into days
diffDays = timeDiff / 86400000

// Calculate our TP levels
take_profit_level := avg_price * (1 + take_profit)
take_S_profit_level := avg_price * (1 - take_S_profit)

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//Either Entry Signals
AvgPrice_Entry = ta.cross(close, avg_entry_price)

groupTitleEitherEntry = "Either Entry"
avg_price_entry_either_Input = input.bool(true, "", group = groupTitleEitherEntry)

groupTitleSOsExit = "SOs and Exit"
Struc_trigger_SO = input.bool(true, "Struc Trigger SO", group = groupTitleSOsExit)

// First Position
//for i = 0 to max_safe_order - 1 by 1
for j = 0 to max_safe_order - 1 by 1
    maxDev := int((maxDev + price_deviation * 100 * math.pow(safe_order_step_scale, i)) * 100) / 100
    maxDev
//for i = 0 to max_S_safe_order - 1 by 1
for j = 0 to max_S_safe_order - 1 by 1
    maxSDev := int((maxSDev + price_S_deviation * 100 * math.pow(safe_S_order_step_scale, i)) * 100) / 100
    maxSDev

// Entry
if long and strategy.position_size == 0 and source_function(source_type) > 0 and (avg_price_entry_either_Input ? AvgPrice_Entry : true)
    _string_long = 'type=order,order-type=long,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_order_lots) + ',comment="' + version + '-' + test + '",entry=true'
    strategy.entry('Long @' + str.tostring(source_function(source_type)), strategy.long, qty=base_order_lots * 100000, alert_message=_string_long)
    initial_order := source_function(source_type)
    current_so := 1
    initial_price := close
    price_drop := close
    original_ttp_value := 0
    firstBarTime := time
    tradeCount += 1
    avg_price := close
    total_funds_in_trade := avg_price * base_order
    total_qty_in_trade := base_order
    entrySignal := true
    barCountSinceEntry := 0  // Reset the counter at entry

else if short and strategy.position_size == 0 and source_function(source_type) > 0 and (avg_price_entry_either_Input ? AvgPrice_Entry : true)
    _string_short = 'type=order,order-type=short,symbol=' + syminfo.ticker + '.PRO' + ',risk=' + str.tostring(base_S_order_lots) + ',comment="' + version + '-' + test + '",entry=true'
    strategy.entry('Short @' + str.tostring(source_function(source_type)), strategy.short, qty=base_S_order, alert_message=_string_short)
    initial_S_order := source_function(source_type)
    current_so := 1
    firstBarTime := time
    tradeCount += 1
    initial_S_price := close
    price_pump := close
    avg_price := close
    total_funds_in_trade := avg_price * base_S_order
    total_qty_in_trade := base_S_order
    entrySignal := true
    barCountSinceEntry := 0  // Reset the counter at entry

// Update bar counter on each bar if there was an entry
if entrySignal
    barCountSinceEntry += 1

// Plot the bar count for visualization
plot(barCountSinceEntry, title="Bars Since Entry", color = color.rgb(7, 232, 187, 100))

//makes the red and green line plot pretty at the position opening
if strategy.position_size == 0
    threshold := low[1]
    S_threshold := high[1]
    S_threshold

//Safety order levels
if strategy.position_size > 0 and i == 0
    if safe_order_step_scale == 1.0
        threshold := initial_order - initial_order * price_deviation * safe_order_step_scale * safe_order_step_scale_Multiplier * current_so
        threshold
    else
        threshold := initial_order - initial_order * (price_deviation * (math.pow(safe_order_step_scale * safe_order_step_scale_Multiplier, current_so) - 1) / (safe_order_step_scale - 1))
        threshold

// Modify the calculation of the threshold for short positions
else if strategy.position_size < 0 and i == 0
    if safe_S_order_step_scale == 1.0
        S_threshold := initial_S_order * (1 + price_S_deviation * current_so)
        S_threshold
    else
        S_threshold := initial_S_order * (1 + price_S_deviation * (math.pow(safe_S_order_step_scale * safe_order_step_scale_Multiplier, current_so) - 1) / (safe_S_order_step_scale - 1))
        S_threshold


// Long SO (Average Down)
if (barCountSinceEntry > waitBars) and current_so > 0 and i == 0 and strategy.position_size > 0 and (Struc_trigger_SO ? trendUp : true)
    order_size = safe_order * math.pow(safe_order_volume_scale, current_so - 1) // Calculate the size of the new SO
    execution_price = close // Or use the actual execution price of the SO
    _string_long_so = 'type=order,order-type=long,symbol=' + str.replace(syminfo.ticker, " ", "") + '.PRO' + ',risk=' + str.tostring(order_size) + ',comment="' + version + '-' + test + '",entry=false'
    strategy.entry('SO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.long, qty=order_size, alert_message=_string_long_so)
    total_funds_in_trade += execution_price * order_size // Update total funds based on the execution price of the new SO
    total_qty_in_trade += order_size // Update total quantity by adding the quantity of the new SO
    avg_price := total_funds_in_trade / total_qty_in_trade // Recalculate the average price
    current_so += 1
    tradeCount += 1


// Short SO (Average Up)
if (barCountSinceEntry > waitBars) and current_so > 0 and i == 0 and strategy.position_size < 0 and (Struc_trigger_SO ? trendDown : true)
    _string_short_so = 'type=order,order-type=short,symbol=' + str.replace(syminfo.ticker, " ", "") + '.PRO' + ',risk=' + str.tostring(safe_S_order_lots * math.pow(safe_S_order_volume_scale, current_so - 1)) + ',comment="' + version + '-' + test + '",entry=false'
    strategy.entry('SSO ' + str.tostring(current_so) + '@' + str.tostring(source_function(source_type)), strategy.short, qty=safe_S_order * math.pow(safe_S_order_volume_scale, current_so - 1), alert_message=_string_short_so)
    total_funds_in_trade += avg_price * base_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)
    total_qty_in_trade += base_S_order * math.pow(safe_S_order_volume_scale, current_so - 1)
    avg_price := total_funds_in_trade / total_qty_in_trade
    current_so += 1
    tradeCount += 1


// Take Profit! 
if i == 1
    strategy.close_all() // Close all positions
    i := 0 // Reset the counter
    i

// If the take profit level is reached and the position is long, close the trade
if take_profit_level <= high and strategy.position_size > 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_close_long = 'type=order,order-type=closelong,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + test + '"' // Prepare the close long order string
    strategy.close_all(comment='Close @' + str.tostring(source_function(source_type)), alert_message=_string_close_long) // Close the long position
    soCount := current_so // Save the current scale-out count
    current_so := 0 // Reset the current scale-out count
    original_ttp_value := 0 // Reset the original take profit value
    price_drop := na // Reset the price drop value
    initial_price := na // Reset the initial price
    diffDays := time - firstBarTime // Calculate the difference in days
    if diffDays > maxDiffDays // If the difference in days is greater than the maximum difference in days
        maxDiffDays := diffDays // Update the maximum difference in days
        longest_trade_day := dayofmonth // Update the longest trade day
        longest_trade_month := month // Update the longest trade month
        longest_trade_month
    i := 1 // Reset the counter
    initial_order := 0.0 // Reset the initial order
    avg_price := na // Reset the average price
    capital *= (1 + total_qty_in_trade * take_profit / 100) // Update the capital
    entrySignal := false

// Take Short Profit! 
// If the take short profit level is reached and the position is short, close the trade
if take_S_profit_level >= low and strategy.position_size < 0 and not(hour(time) == 0 and minute(time) < 59)
    _string_close_short = 'type=order,order-type=closeshort,symbol=' + syminfo.ticker + '.PRO' + ',comment="' + version + '-' + test + '"' // Prepare the close short order string
    strategy.close_all(comment='Close Short @' + str.tostring(source_function(source_type)), alert_message=_string_close_short) // Close the short position
    soCount := current_so // Save the current scale-out count
    current_so := 0 // Reset the current scale-out count
    price_pump := na // Reset the price pump value
    initial_S_price := na // Reset the initial short price
    diffDays := time - firstBarTime // Calculate the difference in days
    if diffDays > maxDiffDays // If the difference in days is greater than the maximum difference in days
        maxDiffDays := diffDays // Update the maximum difference in days
        maxDiffDays
    initial_S_order := 0.0 // Reset the initial short order
    avg_price := na // Reset the average price
    capital *= (1 + total_qty_in_trade * take_S_profit / 100) // Update the capital
    entrySignal := false

//Table building and calculations
if strategy.position_size == 0
    if soCount == 1
        noSO += 1
        noSO
    else if soCount == 2
        SO1 += 1
        SO1
    else if soCount == 3
        SO2 += 1
        SO2
    else if soCount == 4
        SO3 += 1
        SO3
    else if soCount == 5
        SO4 += 1
        SO4
    else if soCount == 6
        SO5 += 1
        SO5
    else if soCount == 7
        SO6 += 1
        SO6
    else if soCount == 8
        SO7 += 1
        SO7
    soCount := 0
    soCount
closedTrades := noSO + SO1 * 2 + SO2 * 3 + SO3 * 4 + SO4 * 5 + SO5 * 6 + SO6 * 7 + SO7 * 8

if low < price_drop and window and strategy.position_size > 0
    price_drop := low
    if max_drop < int((1 - price_drop / initial_price) * 10000) / 100
        max_drop := int((1 - price_drop / initial_price) * 10000) / 100
        drop_date := dayofmonth(time)
        drop_month := month(time)
        drop_month
bgcolor(max_drop[1] < max_drop ? color.new(#0b5a64, 100) : na)

if high > price_pump and window and strategy.position_size < 0
    price_pump := high
    if max_pump < int((price_pump / initial_S_price - 1) * 10000) / 100
        max_pump := int((price_pump / initial_S_price - 1) * 10000) / 100
        pump_date := dayofmonth(time)
        pump_month := month(time)
        pump_month
bgcolor(max_pump[1] < max_pump ? color.new(#9b27b0, 100) : na)

if take_profit_level > 0 and strategy.position_size > 0
    tp_plot := take_profit_level
    tp_plot
else
    tp_plot := close
    tp_plot

if take_S_profit_level > 0 and strategy.position_size < 0
    tp_S_plot := take_S_profit_level
    tp_S_plot
else
    tp_S_plot := close
    tp_S_plot

//Plotting the levels
p1 = plot(tp_plot, color=strategy.position_size <= 0 ? na : TTBColors.colorUp()) // Up color
p2 = plot(avg_price, color=strategy.position_size == 0 ? na : TTBColors.colorNeutral()) // Neutral color
p3 = plot(threshold, color=strategy.position_size <= 0 ? na : color.rgb(7, 232, 187, 100)) // Down color
p4 = plot(tp_S_plot, color=strategy.position_size >= 0 ? na : TTBColors.colorUpPlus()) // UpPlus color
p5 = plot(S_threshold, color=strategy.position_size >= 0 ? na : color.rgb(7, 232, 187, 100)) // DownPlus color
fill(p1, p2, color=strategy.position_size > 0 ? color.new(TTBColors.colorUp(), 90) : na) // Semi-transparent Up color
fill(p2, p3, strategy.position_size > 0 ? color.new(TTBColors.colorNeutral(), 90) : na) // Semi-transparent Neutral color
fill(p4, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorUpPlus(), 90) : na) // Semi-transparent UpPlus color
fill(p5, p2, color=strategy.position_size < 0 ? color.new(TTBColors.colorDownPlus(), 90) : na) // Semi-transparent DownPlus color
profit_color = strategy.openprofit < 0 ? TTBColors.colorDown() : TTBColors.colorUp() // Down color for loss, Up color for profit

text_size = text_size_switch ? size.small : size.normal

//Table formatting
if show_table
    var Table = table.new(position.bottom_right, columns=2, rows=20, border_width=1, bgcolor=color.new(#363a45, 0), border_color=color.gray)
    table.cell(table_id=Table, column=0, row=0, text_color=color.gray, text_size=text_size, text='Net Profit')
    table.cell(table_id=Table, column=1, row=0, text=str.tostring(int((capital - 100) * 100) / 100) + '%', text_size=text_size, text_color=TTBColors.colorUplight())
    table.cell(table_id=Table, column=0, row=1, text_color=color.gray, text_size=text_size, text='Max Deviation ')
    table.cell(table_id=Table, column=1, row=1, text=str.tostring(maxDev) + '%', text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=2, text_color=color.gray, text_size=text_size, text='Max Short Dev ')
    table.cell(table_id=Table, column=1, row=2, text=str.tostring(maxSDev) + '%', text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=3, text='No SO ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=3, text=str.tostring(noSO), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=4, text='SO 1 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=4, text=str.tostring(SO1), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=5, text='SO 2 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=5, text=str.tostring(SO2), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=6, text='SO 3 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=6, text=str.tostring(SO3), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=7, text='SO 4 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=7, text=str.tostring(SO4), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=8, text='SO 5 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=8, text=str.tostring(SO5), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=9, text='SO 6 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=9, text=str.tostring(SO6), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=10, text='SO 7 ', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=10, text=str.tostring(SO7), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=11, text='Closed/Open trades', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=11, text=str.tostring(strategy.closedtrades) + '/' + str.tostring(strategy.opentrades), text_size=text_size, text_color=TTBColors.colorNeutral())
    table.cell(table_id=Table, column=0, row=12, text='Current Deal Time', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=12, text=strategy.position_size != 0 ? str.tostring(int((time - firstBarTime) / 8640000) / 10) + ' days' : '0', text_size=text_size, text_color=color.green)
    table.cell(table_id=Table, column=0, row=13, text='Unrealized position', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=13, text=str.tostring(int(strategy.openprofit / (strategy.initial_capital + strategy.netprofit) * 10000) / 100) + ' %', text_size=text_size, text_color=profit_color)
    table.cell(table_id=Table, column=0, row=14, text='Longest deal:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=14, text=str.tostring(int(maxDiffDays / 8640000) / 10) + ' days, ' + str.tostring(longest_trade_day) + '/' + str.tostring(longest_trade_month), text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=15, text='Max price drop:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=15, text=str.tostring(max_drop) + ' %, ' + str.tostring(drop_date) + '/' + str.tostring(drop_month), text_size=text_size, text_color=TTBColors.colorDownlight())
    table.cell(table_id=Table, column=0, row=16, text='Max price pump:', text_size=text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=16, text=str.tostring(max_pump) + ' %, ' + str.tostring(pump_date) + '/' + str.tostring(pump_month), text_size=text_size, text_color=TTBColors.colorDownlight())
